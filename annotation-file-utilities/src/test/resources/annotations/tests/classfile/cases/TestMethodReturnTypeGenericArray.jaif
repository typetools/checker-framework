package annotations.tests.classfile.foo:
annotation @A: @Retention(value=RUNTIME) @Target(TYPE_USE)

annotation @B: @Retention(value=RUNTIME) @Target(TYPE_USE)
	String value

// annotation @C: @Retention(value=CLASS) @java.lang.annotation.Target(value={TYPE_USE})
annotation @C: @Retention(value=RUNTIME) @Target(TYPE_USE)
	int fieldA
	String fieldB

package annotations.tests.classfile.cases:
class TestMethodReturnTypeGenericArray:
	method test()Ljava/util/List; :
		return: @A

	method test2()Ljava/util/List; :
		return: @B(value="single-depth")
			inner-type 3, 0 : @A

	method test3()[Ljava/lang/String; :
		return: @A
			inner-type 0, 0 : @B(value="on array element")

	method test4()[[Ljava/lang/String; :
		return:  @A
			inner-type 0, 0 : @B(value="on")
			inner-type 0, 0, 0, 0 : @B(value="in")

	method test5()Ljava/util/Set; :
		return:
			inner-type 3, 0 : @A
			inner-type 3, 0, 0, 0 : @B(value="two-deep")

  method test6()Ljava/util/Map; :
	return:
		inner-type 3, 0 : @B(value="map as key")
		inner-type 3, 1, 3, 0 : @B(value="array of value")
		inner-type 3, 1, 3, 0, 0, 0 : @B(value="inner-most value")
		inner-type 3, 1 : @B(value="set as value")
		inner-type 3, 0, 3, 0, 0, 0 : @B(value="innermost key or key")
		inner-type 3, 0, 3, 0 : @A
		inner-type 3, 0, 3, 1 : @C(fieldA=01, fieldB="value of key")
		inner-type 3, 0, 3, 1, 3, 0: @A

