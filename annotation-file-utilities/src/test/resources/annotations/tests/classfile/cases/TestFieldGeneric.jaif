package annotations.tests.classfile.foo:
annotation @A: @Retention(value=RUNTIME) @java.lang.annotation.Target(value={TYPE_USE})

annotation @B: @Retention(value=RUNTIME) @java.lang.annotation.Target(value={TYPE_USE})
	String value

// annotation @C: @Retention(value=CLASS) @java.lang.annotation.Target(value={TYPE_USE})
annotation @C: @Retention(value=RUNTIME) @java.lang.annotation.Target(value={TYPE_USE})
	int fieldA
	String fieldB

annotation @D: @Retention(value=RUNTIME) @java.lang.annotation.Target(value={TYPE_USE})
	int fieldA
	String fieldB
	int[] fieldC

annotation @E: @Retention(value=RUNTIME) @java.lang.annotation.Target(value={TYPE_USE})
	int fieldA
	String fieldB

annotation @F: @Retention(value=RUNTIME) @java.lang.annotation.Target(value={TYPE_USE})
	int fieldA
	String fieldB

annotation @G: @Retention(value=RUNTIME) @java.lang.annotation.Target(value={TYPE_USE})
	int fieldA
	String fieldB
	boolean[] fieldC
	int fieldD
	int fieldE

package annotations.tests.classfile.cases:
class TestFieldGeneric: @annotations.tests.classfile.foo.A
	field s: @annotations.tests.classfile.foo.F(fieldA=1, fieldB="fi")
	field list: @annotations.tests.classfile.foo.G(fieldA=3, fieldB="three", fieldC={true, false}, fieldD=2, fieldE=4)
	field set: @annotations.tests.classfile.foo.E(fieldA=2, fieldB = "rh")
						 @annotations.tests.classfile.foo.F(fieldA = 1, fieldB = "if")
  field testFieldGeneric:
	type:
  				inner-type 3, 0 : @A


  // Set<TestFieldGeneric<Set<TestFieldGeneric>>> nestedSet;

    field nestedSet: @B(value="nested")
	type:
  				inner-type 3, 0 : @annotations.tests.classfile.foo.F(fieldA=1, fieldB="n")
  				inner-type 3, 0 : @annotations.tests.classfile.foo.A
  				inner-type 3, 0, 3, 0 : @annotations.tests.classfile.foo.B(value="nil")
  				inner-type 3, 0 : @annotations.tests.classfile.foo.C(fieldA=-2, fieldB="nl")
  				inner-type 3, 0, 3, 0, 3, 0 : @annotations.tests.classfile.foo.D(fieldA=-1, fieldB="hello", fieldC={3,2,4})

  // Map<Set<TestFieldGeneric>, TestFieldGeneric<T>> nestedMap;

  	field nestedMap: @annotations.tests.classfile.foo.C(fieldA=1, fieldB="nested")
	    type:
  				inner-type 3, 1 : @annotations.tests.classfile.foo.A
  				inner-type 3, 1, 3, 0 : @annotations.tests.classfile.foo.B(value="inner most T")
  				inner-type 3, 0, 3, 0 : @annotations.tests.classfile.foo.C(fieldA=256, fieldB="hello")
  				inner-type 3, 0 : @annotations.tests.classfile.foo.B(value="inner most F")




