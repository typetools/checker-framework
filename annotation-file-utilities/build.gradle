buildscript {
  if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
    throw new Error("Annotation tools can't be built with Java 8.")
  }
}

import org.gradle.internal.jvm.Jvm
import java.nio.file.Files

plugins {
  id 'java'
}
apply plugin: 'java'

java {
  // This test is for whether the Checker Framework runs under Java 8.
  // Currently, the Checker Framework does run under Java 8.
  if (true /* runs under Java 8 */) {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
  } else {
    sourceCompatibility = 11
    targetCompatibility = 11
  }
}

dependencies {
  // Annotations in checker-qual.jar are used, but no checkers are (currently) run on the code.
  compileOnly 'org.checkerframework:checker-qual:3.49.5'

  implementation 'org.plumelib:options:2.0.3'
  implementation 'org.plumelib:plume-util:1.11.0'
  implementation 'org.plumelib:reflection-util:1.1.5'
  implementation ('org.checkerframework.annotatedlib:guava:33.1.0.2-jre') {
    // So long as Guava only uses annotations from checker-qual, excluding it should not cause problems.
    exclude group: 'org.checkerframework'
  }
  implementation 'org.ow2.asm:asm:9.8'
  testImplementation group: 'junit', name: 'junit', version: '4.13.2'
  testImplementation 'org.checkerframework:checker-qual:3.49.5'
}


shadowJar {
  destinationDirectory = projectDir
  includeEmptyDirs = false
  archiveFileName = 'annotation-file-utilities-all.jar'
  // Don't include any class from the Checker Framework.
  // This should just be checker-qual.
  exclude 'org/checkerframework/checker/**'
  exclude 'org/checkerframework/framework/**'
  exclude 'org/checkerframework/dataflow/**'

  doFirst {
    // TODO: The release fails because of this, so skip it for now.
    if (project.hasProperty('release') && false) {
      println 'Relocating packages.'
      relocate 'org.apache', 'org.checkerframework.org.apache'
      relocate 'org.relaxng', 'org.checkerframework.org.relaxng'
      relocate 'org.plumelib', 'org.checkerframework.org.plumelib'
      relocate 'org.objectweb.asm', 'org.checkerframework.org.objectweb.asm'
      relocate 'com.google', 'org.checkerframework.com.google'
    }
  }
}

// Shadowing Test Sources and Dependencies
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

task skinnyJar(type: ShadowJar, dependsOn: compileJava) {
  description = 'Builds annotation-file-utilities.jar with only scene-lib and annotation-file-utilities classes.'
  includeEmptyDirs = false
  destinationDirectory = projectDir
  archiveFileName = 'annotation-file-utilities.jar'
  include 'org/checkerframework/afu/scenelib/**/*.class'
  include 'org/checkerframework/afu/annotator/**/*.class'
}

task testExample(type: JavaExec, dependsOn: compileTestJava, group: 'Verification') {
  description = 'Run the scene-lib example test.'
  String resourceDir = "${projectDir}/src/test/resources/annotations/tests/executable/"
  String outputDir = "${layout.buildDirectory.get()}/example-test/"

  classpath = files(sourceSets.test.java.classesDirectory)
  classpath += sourceSets.test.compileClasspath
  mainClass = 'org.checkerframework.afu.scenelib.test.executable.Example'
  doFirst {
    file(outputDir).mkdir()
    new File("${outputDir}/example-stdout.jaif").createNewFile()

    standardOutput = new FileOutputStream("${outputDir}/example-stdout.jaif")
  }
  args = [
    "${resourceDir}/example-input.jaif",
    "foo.Bar",
    "${outputDir}/example-output.jaif"
  ]

  doLast {

    byte[] goalJaif = Files.readAllBytes(new File(resourceDir, "example-output.jaif.goal").toPath());
    byte[] outputJaif = Files.readAllBytes(new File(outputDir, "example-output.jaif").toPath());
    if (!Arrays.equals(goalJaif, outputJaif)) {
      throw new GradleException("In ${outputDir}, file example-output.jaif does not match goal.")
    }

    byte[] goalStdOut = Files.readAllBytes(new File(resourceDir, "example-stdout.jaif.goal").toPath());
    byte[] stdOut = Files.readAllBytes(new File(outputDir, "example-stdout.jaif").toPath());
    if (!Arrays.equals(goalStdOut, stdOut)) {
      throw new GradleException("In ${outputDir}, file example-stdout.jaif does not match goal.")
    }
  }
}

task testAnnotator(type: Exec, dependsOn: shadowJar, group: 'Verification') {
  description = 'Run the annotator test.'
  workingDir "${projectDir}/tests/"
  executable 'make'
}

task cleanTestAnnotator(type: Exec) {
  description = "Clean the annotator test."
  workingDir 'tests/'
  executable 'make'
  args("clean")
}

ext.plumeBibHome = "${projectDir}/plume-bib"

task getPlumeBib(type: Exec) {
  description = 'Obtain or update the plume-bib bibliography.'
  doFirst {
    if (file(plumeBibHome).exists()) {
      workingDir plumeBibHome
      executable 'git'
      args = ['pull', '-q']
      ignoreExitValue = true
    } else {
      workingDir "${plumeBibHome}/../"
      executable 'git'
      args = [
        'clone',
        '-q',
        'https://github.com/mernst/plume-bib.git'
      ]
    }
  }
}

interface InjectedExecOps {
  @javax.inject.Inject
  ExecOperations getExecOps()
}

task makeAnnotationFileFormat(dependsOn: getPlumeBib) {
  description = 'Make documentation: annotation-file-format.{html,pdf}.'
  def injected = project.objects.newInstance(InjectedExecOps)

  doLast {
    injected.execOps.exec {
      executable 'make'
      args = [
        '-C',
        'figures'
      ]
    }
    injected.execOps.exec {
      executable 'latex'
      args 'annotation-file-format.tex'
    }

    injected.execOps.exec {
      executable 'bibtex'
      args 'annotation-file-format'
      environment BIBINPUTS: ".:${plumeBibHome}"
    }

    injected.execOps.exec {
      executable 'latex'
      args 'annotation-file-format.tex'
    }

    injected.execOps.exec {
      executable 'latex'
      args 'annotation-file-format.tex'
    }

    injected.execOps.exec {
      executable 'pdflatex'
      args 'annotation-file-format.tex'
    }

    injected.execOps.exec {
      executable 'hevea'
      args = [
        "-fix",
        "-exec",
        "xxdate.exe",
        "urlhref.hva",
        "annotation-file-format.tex"
      ]
    }
  }
}

task cleanManual(type: Exec) {
  executable 'make'
  args = [
    '-C',
    'figures',
    'clean'
  ]
}

clean {
  dependsOn(cleanTestAnnotator, cleanManual)
  delete('annotation-file-utilities.jar','annotation-file-utilities-all.jar', 'annotation-tools.zip')
  delete "annotation-file-format.aux"
  delete "annotation-file-format.dvi"
  delete "annotation-file-format.haux"
  delete "annotation-file-format.html"
  delete "annotation-file-format.htoc"
  delete "annotation-file-format.log"
  delete "annotation-file-format.pdf"
  delete "annotation-file-format.toc"
  delete "scene-lib-type-hierarchy.png"
}

task htmlValidate(type: Exec) {
  description = 'Validate that HTML files are well-formed.'
  workingDir '../'
  executable 'html5validator'
  args = [
    // The --ignore command-line argument applies to everything until the next
    // command-line argument; that is, everything listed here is ignored.
    "--ignore",
    "/annotation-file-utilities/annotation-file-format.html",
    "/api/",
    "/build/",
    "/javadoc/",
    "/plume-bib/",
    "/scene-lib/javadoc/"
  ]
}

test.dependsOn testExample
test.dependsOn testAnnotator

task updateUserOptions(dependsOn: [
  'updateUserOptionsJavadoc',
  'updateUserOptionsHtml'
]) {}

task updateUserOptionsJavadoc(type: Javadoc, dependsOn: 'assemble') {
  description = "Updates documentation of command-line arguments in Javadoc."

  // Include only sources from annotation-file-utilities, not from scene-lib.
  source = fileTree(dir: 'src', include: '**/*.java')
  exclude 'org.checkerframework.afu.scenelib.io.classfile/**'
  classpath = project.sourceSets.main.compileClasspath + project.sourceSets.main.runtimeClasspath
  options.memberLevel = JavadocMemberLevel.PRIVATE
  options.docletpath = project.sourceSets.main.runtimeClasspath as List
  options.doclet = "org.plumelib.options.OptionsDoclet"
  options.addStringOption("docfile", "${projectDir}/src/annotator/Main.java")
  options.addStringOption("format", "javadoc")
  options.addStringOption("i", "-quiet")
  options.addStringOption('source', '8')
  options.noTimestamp(false)
  title = ""
}

task updateUserOptionsHtml(type: Javadoc, dependsOn: 'assemble') {
  description = "Updates documentation of command-line arguments in the manual."

  // Include only sources from annotation-file-utilities, not from scene-lib.
  source = fileTree(dir: 'src', include: '**/*.java')
  exclude 'org.checkerframework.afu.scenelib.io.classfile/**'
  classpath = project.sourceSets.main.compileClasspath + project.sourceSets.main.runtimeClasspath
  options.memberLevel = JavadocMemberLevel.PRIVATE
  options.docletpath = project.sourceSets.main.runtimeClasspath as List
  options.doclet = "org.plumelib.options.OptionsDoclet"
  options.addStringOption("docfile", "${projectDir}/annotation-file-utilities.html")
  options.addStringOption("format", "html")
  options.addStringOption("i", "-quiet")
  options.addStringOption('source', '8')
  options.noTimestamp(false)
  title = ""
}

artifacts {
  archives shadowJar
  archives skinnyJar
}


ext.tmpAnnotationTools = "${layout.buildDirectory.get()}/tmp-annotation-tools"
task cloneAndPrepDirectoryForZipfile(type: Exec) {
  dependsOn(assemble, makeAnnotationFileFormat)
  description = 'Copy files from repository to temporary directory from which they will be packaged up.'
  doFirst {
    delete tmpAnnotationTools
  }
  executable 'git'
  args = [
    'clone',
    '../',
    "${tmpAnnotationTools}"
  ]
  doLast {
    delete "${tmpAnnotationTools}/scene-lib.orig-hand-annos"
    delete "${tmpAnnotationTools}/.git"
    delete "${tmpAnnotationTools}/.gitignore"
    delete "${tmpAnnotationTools}/.hg_archival.txt"
    delete "${tmpAnnotationTools}/.hgignore"
    copy {
      from projectDir
      into "${tmpAnnotationTools}/annotation-file-utilities"
      include "annotation-file-format.dvi"
      include "annotation-file-format.html"
      include "annotation-file-format.pdf"
      include "annotation-file-utilities.jar"
      include "annotation-file-utilities-all.jar"
    }
  }
}

task zipfile(type: Zip) {
  description = "create the distribution: annotation-tools.zip"
  dependsOn(cloneAndPrepDirectoryForZipfile)
  archiveFileName = 'annotation-tools.zip'
  destinationDirectory = projectDir
  from files(tmpAnnotationTools)
}

task copyToDeployDir {
  description = 'copy release to deployDir.'
  doLast {
    String deployDir = project.getProperties().get("deploy-dir")
    String afuVersion = project.getProperties().get("afu.version")
    println("Export location: ${deployDir}")
    println("Copying annotation-tools.zip")
    copy {
      from projectDir
      into deployDir
      include 'annotation-tools.zip'
      include 'annotation-file-utilities.html'
      include 'annotation-file-format.html'
      include 'annotation-file-format.pdf'
      include 'figures/*.svg'
      include 'figures/*.png'
      include 'figures/*.gif'
      include 'changelog.html'
      rename('annotation-tools.zip', "annotation-tools-${afuVersion}.zip")
    }
    delete "${deployDir}/index.html"
    Files.createSymbolicLink(file("${deployDir}/index.html").toPath(), file("${deployDir}/annotation-file-utilities.html").toPath())
  }
}

task releaseBuild(type: GradleBuild) {
  description = 'Build everything required for a release, after cleanning.'
  doFirst {
    if (!project.hasProperty('deploy-dir')) {
      println project.properties.entrySet()*.toString().sort().toString().replaceAll(", ","\n")
      throw new RuntimeException("You must specify a deploy-dir. The live site deploy-dir=/cse/www2/types/annotation-file-utilities/releases/VERSIONNUMBER")
    }
    if (!project.hasProperty('afu.version')) {
      println project.properties.entrySet()*.toString().sort().toString().replaceAll(", ","\n")
      throw new RuntimeException("You must specify an afu.version, such as 3.6.22")
    }
  }

  startParameter.projectProperties += gradle.startParameter.projectProperties
  startParameter.projectProperties += [release: true.toString()]

  tasks = [
    'clean',
    'zipfile',
    'testAnnotator',
    'copyToDeployDir'
  ]
}

task releaseBuildWithoutTest(type: GradleBuild) {
  description = 'Build everything required for a release, without cleaning first.'
  doFirst {
    if (!project.hasProperty('deploy-dir')) {
      println project.properties.entrySet()*.toString().sort().toString().replaceAll(", ","\n")
      throw new RuntimeException("You must specify a deploy-dir. The live site deploy-dir=/cse/www2/types/annotation-file-utilities/releases/VERSIONNUMBER")
    }
    if (!project.hasProperty('afu.version')) {
      println project.properties.entrySet()*.toString().sort().toString().replaceAll(", ","\n")
      throw new RuntimeException("You must specify an afu.version, such as 3.6.22")
    }
  }

  startParameter.projectProperties += gradle.startParameter.projectProperties
  startParameter.projectProperties += [release: true.toString()]

  tasks = [
    'clean',
    'zipfile',
    'copyToDeployDir'
  ]
}
