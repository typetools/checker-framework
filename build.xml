<!--
  This is a configuration file for use by Ant when building the
  Checker Framework.
  This top-level build file simply delegates to the subprojects.
  It assumes that the "checker" project is aware of all dependencies
  and that it is sufficient to run targets from there.

  Each subproject builds its own Javadoc including the documentation
  of all projects it in turn depends on. This would allow us to
  easily ship each subproject independently. Subprojects that
  already ship independently also build a Javadoc JAR file
  containing all its documentation.
-->
<project name="checkerframework" default="dist"
        basedir=".">
  <property file="${basedir}/local.properties"/>

  <property name="checkerframework" value="${basedir}"/>
  <property file="${checkerframework}/build-common.properties"/>

  <target name="dist"
          description="Compile and jar all subprojects">
    <ant dir="checker">
      <target name="dist"/>
    </ant>
  </target>

  <target name="dist-nobuildjdk"
          description="Rebuild the framework.  Rebuild checker on top of framework without rebuilding the JDK">
      <ant dir="framework">
          <target name="clean"/>
          <target name="dist"/>
      </ant>
      <ant dir="checker">
          <target name="dist-nobuildjdk"/>
      </ant>
  </target>

  <target name="build"
          description="Compile all subprojects">
    <ant dir="checker">
      <target name="build"/>
    </ant>
  </target>

  <target name="clean"
          description="Clean all subprojects">
    <ant dir="checker">
      <target name="clean"/>
    </ant>
  </target>

  <target name="tests" depends="dist"
          description="Run test cases for all subprojects">
    <ant dir="checker">
      <target name="all-tests"/>
    </ant>
  </target>

  <target name="tests-nojtreg" depends="dist"
          description="Run test cases for all subprojects, except jtreg tests">
    <ant dir="checker">
      <target name="all-tests-nojtreg"/>
    </ant>
  </target>

  <target name="tests-nobuildjdk" depends="dist-nobuildjdk"
          description="Run test cases for all subprojects (without rebuilding the JDK)">
    <ant dir="checker">
      <target name="all-tests-nobuildjdk"/>
    </ant>
  </target>

  <target name="tests-nojtreg-nobuildjdk" depends="dist-nobuildjdk"
          description="Run test cases for all subprojects, except jtreg tests (without rebuilding the JDK)">
    <ant dir="checker">
      <target name="all-tests-nojtreg-nobuildjdk"/>
    </ant>
  </target>

  <target name="javadoc"
          description="Generate javadoc for all subprojects">
    <ant dir="checker">
      <target name="javadoc"/>
    </ant>
    <ant dir="dataflow">
      <target name="javadoc"/>
    </ant>
    <ant dir="framework">
      <target name="javadoc"/>
    </ant>
    <ant dir="javacutil">
      <target name="javadoc"/>
    </ant>
  </target>

  <target name="javadoc-private"
          description="Generate javadoc, inculding private classes/members, for all subprojects">
    <ant dir=".">
      <property name="javadoc.private" value="true"/>
      <target name="javadoc"/>
    </ant>
  </target>

  <target name="dist-release">
      <ant dir="checker">
          <target name="dist-release"/>
      </ant>
      <ant dir="javacutil">
          <target name="sources-jar"/>
      </ant>
      <ant dir="javacutil">
        <target name="javadoc-jar" />
      </ant>
      <ant dir="dataflow">
          <target name="sources-jar"/>
      </ant>
      <ant dir="dataflow">
          <target name="javadoc-jar" />
      </ant>
  </target>

  <!-- Like dist-release, but skips CF tests which take a long time to run. -->
  <target name="dist-release-notest">
      <ant dir="checker">
          <target name="dist-release-notest"/>
      </ant>
      <ant dir="javacutil">
          <target name="sources-jar"/>
      </ant>
      <ant dir="javacutil">
        <target name="javadoc-jar" />
      </ant>
      <ant dir="dataflow">
          <target name="sources-jar"/>
      </ant>
      <ant dir="dataflow">
          <target name="javadoc-jar" />
      </ant>
  </target>

  <target name="html-validate"
          description="Validate that HTML files are well-formed; requires JDK 8">
    <exec executable="html5validator" failonerror="true">
      <arg value="--ignore"/>
      <arg value="/api/"/>
      <arg value="/build/"/>
      <arg value="/docs/manual/manual.html"/>
      <arg value="/checker/jdk/nullness/src/java/lang/ref/package.html"/>
    </exec>
  </target>


  <fileset id="formatted.java.files" dir="."
           includes="**/*.java"
           excludes="checker/jdk/,checker/tests/nullness-javac-errors/,framework/tests/whole-program-inference/annotated/"/>

  <import file="./build-styleguide.xml"/>


  <!-- I tried using a fileset like this: <fileset
       id="errorprone.java.files" dir="."  includes="**/*.java"
       excludes="**/javacutil/dist/**"/> but didn't find a way to get
       the javac target to use it. Instead, I now use separate
       properties. -->

  <property name="errorprone.project.includes" value="**/*.java"/>
  <property name="errorprone.project.excludes" value="**/javacutil/dist/**"/>
  <property name="errorprone.project.classpath" value="${javac.lib}:${annotation-file-utilities.lib}:${stubparser.lib}:${junit.lib}:${hamcrest.lib}"/>
  <!-- Instead of direct references to `src` this should use `${src}`.
       This seems stupid and we should remove the `${src}` property or
       introduce e.g. a `${framework.src.loc} property. -->
  <property name="errorprone.project.srcdir" value="${framework.loc}/src:${dataflow.loc}/src:${javacutil.loc}/src:${checker.loc}/src"/>

  <import file="./build-errorprone.xml"/>


  <target name="tags"
          description="Generate TAGS file">
    <ant dir="checker">
      <target name="tags"/>
    </ant>
    <ant dir="dataflow">
      <target name="tags"/>
    </ant>
    <ant dir="framework">
      <target name="tags"/>
    </ant>
    <ant dir="javacutil">
      <target name="tags"/>
    </ant>
    <exec executable="make" dir="docs/manual" failonerror="true">
      <arg value="tags"/>
    </exec>
    <exec executable="etags" failonerror="true">
      <arg value="-i"/>
      <arg value="checker/TAGS"/>
      <arg value="-i"/>
      <arg value="dataflow/TAGS"/>
      <arg value="-i"/>
      <arg value="framework/TAGS"/>
      <arg value="-i"/>
      <arg value="javacutil/TAGS"/>
      <arg value="-i"/>
      <arg value="docs/manual/TAGS"/>
    </exec>
  </target>

  <target name="clean-tags"
          description="Remove TAGS files">
    <exec executable="rm" failonerror="false">
      <arg value="-f"/>
      <arg value="checker/TAGS"/>
      <arg value="dataflow/TAGS"/>
      <arg value="framework/TAGS"/>
      <arg value="javacutil/TAGS"/>
      <arg value="docs/manual/TAGS"/>
    </exec>
  </target>

</project>
