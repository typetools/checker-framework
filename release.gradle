import java.nio.file.Files
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

ext {
  currentDate = LocalDateTime.now().format(DateTimeFormatter.ofPattern("d MMM yyyy"))
  releaseVersionRegex = "\\d\\.\\d+\\.\\d+(?:\\.\\d)?"

  // Increment the minor version (second number) rather than just the patch
  // level (third number) if:
  //   * any new checkers have been added, or
  //   * backward-incompatible changes have been made to APIs or elsewhere.
  // To make a snapshot release, version should end in "-SNAPSHOT", then: ./gradlew publish
  releaseVersion = '3.49.6'
}

tasks.register('updateVersionNumbers', Copy) {
  dependsOn('updateVersionNumbersInDocs')
  dependsOn('updateVersionNumbersAFU')
  // It's not possible to update the versions numbers in place, so updateVersionNumbersInDocs and
  // updateVersionNumbersAFU copy to temporary directory, then this task copies the changed files
  // back into there original locations.
  from layout.buildDirectory.file('updateVersionNumbers/')
  into layout.projectDirectory
}

tasks.register('updateVersionNumbersAFU', Copy) {
  // It's not possible to update the versions numbers in place, so copy to temporary directory.
  into layout.buildDirectory.file('updateVersionNumbers/annotation-file-utilities')
  from 'annotation-file-utilities'
  include 'src/main/java/org/checkerframework/afu/scenelib/io/classfile/ClassFileReader.java'
  filter { String line ->
    line.replaceAll( "Annotation File Utilities v${releaseVersionRegex}", "Annotation File Utilities v${releaseVersion}")
  }
  doFirst {
    if(!file('annotation-file-utilities/src/main/java/org/checkerframework/afu/scenelib/io/classfile/ClassFileReader.java').exists()) {
      throw new GradleException("File annotation-file-utilities/src/main/java/org/checkerframework/afu/scenelib/io/classfile/ClassFileReader.java not found.")
    }
  }
}

tasks.register('updateVersionNumbersInDocs', Copy) {
  // It's not possible to update the versions numbers in place, so copy to temporary directory.
  into layout.buildDirectory.file('updateVersionNumbers/docs/')
  from('docs/') {
    include 'annotation-file-utilities/annotation-file-utilities.html',
        'checker-framework-quick-start.html',
        'checker-framework-webpage.html',
        'manual/introduction.tex'

    filter { String line ->
      line = line.replaceAll("checker-framework-${releaseVersionRegex}", "checker-framework-${releaseVersion}")
      line.replaceAll("<!-- checker-framework-date -->(.*)<!-- /checker-framework-date -->", "<!-- checker-framework-date -->${currentDate}<!-- /checker-framework-date -->")
    }
  }

  from('docs') {
    include 'manual/external-tools.tex'
    filter { String line ->
      line = line.replaceAll("checker-framework-${releaseVersionRegex}", "checker-framework-${releaseVersion}");

      line = line.replaceAll("checker([-/])${releaseVersionRegex}", "checker\1${releaseVersion}");
      line = line.replaceAll("checker-qual([-/])${releaseVersionRegex}", "checker-qual\1${releaseVersion}");
      line = line.replaceAll("checker-util([-/])${releaseVersionRegex}", "checker-util\1${releaseVersion}");

      line = line.replaceAll("/${releaseVersionRegex}/jar", "/${releaseVersion}/jar");

      line.replaceAll("ext.checkerFrameworkVersion = '${releaseVersionRegex}", "ext.checkerFrameworkVersion = '${releaseVersion}");
    }
  }

  from('docs') {
    include 'manual/manual.tex'

    filter { String line ->
      line = line.replaceAll("ReleaseDate\\}\\{(.*)\\}", "ReleaseDate}{${currentDate}}");
      line.replaceAll("ReleaseVersion\\}\\{(.*)\\}", "ReleaseVersion}{${releaseVersion}}");
    }
  }

  from('docs') {
    include 'examples/MavenExample/pom.xml'

    filter { String line ->
      line.replaceAll("<!-- checker-framework-version -->(.*)<!-- /checker-framework-version -->", "<!-- checker-framework-version -->${releaseVersion}<!-- /checker-framework-version -->")
    }
  }
}


tasks.register('createCheckerFrameworkZip', Zip) {
  description = 'Creates a zip archive for the Checker Framework. Requires property `cfWebsite` to be set to some directory.'
  dependsOn('buildAll')
  archiveFileName = "checker-framework-${version}.zip"
  destinationDirectory = file(project.property('cfWebsite'))
  into "checker-framework-${releaseVersion}"

  from(layout.projectDirectory) {
    exclude 'api/**',
        'checker/bin/README',
        'checker/dist/*.asc',
        'docs/tutorial/tests/**',
        'docs/tutorial/src/**',
        'docs/tutorial/test/**',
        'docs/tutorial/Makefile',
        'docs/tutorial/README'

    include 'README.html',
        'LICENSE.txt',
        'annotation-file-utilities/bin/**',
        'annotation-file-utilities/dist/**',
        'annotation-file-utilities/LICENSE.txt',
        'checker/bin/**',
        'checker/dist/**',
        'checker/resources/**',
        'docs/CHANGELOG.md',
        'docs/annotation-file-utilities/annotation-file-utilities.html',
        'docs/annotation-file-utilities/annotation-file-format.pdf',
        'docs/annotation-file-utilities/annotation-file-format.html',
        'docs/annotation-file-utilities/*.png',
        'docs/manual/manual.html',
        'docs/manual/manual.pdf',
        'docs/manual/*.svg',
        'docs/manual/manual001.png',
        'docs/manual/manual001.svg',
        'docs/examples/InterningExample.java',
        'docs/examples/InterningExampleWithWarnings.java',
        'docs/examples/NullnessExample.java',
        'docs/examples/NullnessExampleWithWarnings.java',
        'docs/examples/NullnessReleaseTests.java',
        'docs/examples/units-extension/Demo.java',
        'docs/examples/units-extension/Expected.txt',
        'docs/examples/units-extension/Frequency.java',
        'docs/examples/units-extension/FrequencyRelations.java',
        'docs/examples/units-extension/Hz.java',
        'docs/examples/units-extension/kHz.java',
        'docs/examples/units-extension/Makefile',
        'docs/examples/units-extension/README',
        'docs/examples/MavenExample/pom.xml',
        'docs/examples/MavenExample/README',
        'docs/examples/MavenExample/src/main/java/org/checkerframework/example/MavenExample.java',
        'docs/tutorial/**'
  }

  from('dataflow/manual/checker-framework-dataflow-manual.pdf') {
    into 'docs/manual/'
  }

  from('docs/logo/Logo/CFLogo.png') {
    into 'docs/manual/'
  }

  from('docs/logo/Logo/CFLogo.png') {
    into 'docs/tutorial/'
  }

  from('docs/logo/Logo/CFLogo.png') {
    into 'docs/tutorial/webpages'
  }
}

tasks.register('zipMavenExamples', Zip) {
  description = 'Creates a zip archive for the Maven examples.'
  archiveFileName = "mvn-examples.zip"
  destinationDirectory = file(project.property('cfWebsite'))
  from('docs/examples/MavenExample')
}

tasks.register('copyCFWebsite', Copy) {
  description = 'Copy CF website to the location set in property cfWebsite.'

  dependsOn(':allJavadoc',':manual')
  String destDir = project.property('cfWebsite')
  destinationDir = file(destDir)
  doLast{
    delete(file("${destDir}/index.html"))
    Files.createSymbolicLink(file("${destDir}/index.html").toPath(), file("${destDir}/checker-framework-webpage.html").toPath())
  }
  from ('docs') {
    include('checker-framework-webpage.html', 'CHANGELOG.md')
  }
  from('docs/logo/Logo/CFLogo.png') {
    into 'tutorial/'
  }

  from('docs/logo/Logo/CFLogo.png') {
    into 'tutorial/webpages'
  }

  from('docs/logo/Logo/CFLogo.png') {
    into 'manual'
  }

  // Copy favicon
  from('docs/logo/Checkmark/CFCheckmark_favicon.png') {
    rename('CFCheckmark_favicon.png','favicon-checkerframework.png' )
  }

  from('docs/logo/Checkmark/CFCheckmark_favicon.png') {
    into 'manual'
    rename('CFCheckmark_favicon.png','favicon-checkerframework.png' )
  }

  // Copy manual files
  from('docs/manual') {
    into 'manual'
    include 'manual.html',
        'manual.pdf',
        '*.svg',
        'manual001.png'
  }

  // Copy developer docs
  from('docs/developer') {
    into 'manual'
    include 'developer-manual.html',
        'gsoc-ideas.html',
        'new-contributor-projects.html'
  }

  // Copy Dataflow manual
  from ('dataflow/manual/checker-framework-dataflow-manual.pdf') {
    into 'manual'
  }

  // Copy tutorial
  from ('docs/tutorial') {
    into 'tutorial'
  }

  // Copy Javadoc
  from ('docs/api') {
    into 'api'
  }

  doLast{
    delete(file("${destDir}/manual/index.html"))
    Files.createSymbolicLink(file("${destDir}/manual/index.html").toPath(), file("${destDir}/manual/manual.html").toPath())
  }
}

tasks.register('copyAFUWebsite', Copy) {
  description = 'Copy AFU website to the location set in property afuWebsite.'
  String destDir = project.property('afuWebsite')
  destinationDir = file(destDir)

  from 'docs/annotation-file-utilities'

  include 'annotation-file-utilities.html'
  include 'annotation-file-format.html'
  include 'annotation-file-format.pdf'
  include 'figures/*.svg'
  include 'figures/*.png'
  include 'figures/*.gif'

  doLast {
    delete "${destDir}/index.html"
    Files.createSymbolicLink(file("${destDir}/index.html").toPath(), file("${destDir}/annotation-file-utilities.html").toPath())
  }
}

tasks.register('copyToWebsite') {
  description = 'Copy files to website and create Checker Framework zip file. Requires properties afuWebsite and cfWebsite to be set.'
  dependsOn('copyCFWebsite','copyAFUWebsite', 'createCheckerFrameworkZip','zipMavenExamples')
}

tasks.register('updateCopyMavenExample', Copy) {
  String destDir = project.property('destDir') + '/MavenExample'
  destinationDir = file(destDir)
  from 'docs/examples/MavenExample'
  filter { String line ->
    line.replaceAll("<!-- checker-framework-version -->(.*)<!-- /checker-framework-version -->", "<!-- checker-framework-version -->${releaseVersion}<!-- /checker-framework-version -->")
  }
}
