### Error messages for BaseTypeChecker
assignability.invalid=Cannot (re-)assign %s through the reference: %s
receiver.invalid=incompatible types.\nfound   : %s\nrequired: %s

array.initializer.type.incompatible=incompatible types in array initializer.\nfound   : %s\nrequired: %s
assignment.type.incompatible=incompatible types in assignment.\nfound   : %s\nrequired: %s
compound.assignment.type.incompatible=incompatible result type in compound assignment.\nfound   : %s\nrequired: %s
enhancedfor.type.incompatible=incompatible types in enhanced for loop.\nfound   : %s\nrequired: %s
vector.copyinto.type.incompatible=incompatible component type in Vector.copyinto.\nfound   : %s\nrequired: %s
return.type.incompatible=incompatible types in return.\nfound   : %s\nrequired: %s
annotation.type.incompatible=incompatible types in annotation.\nfound   : %s\nrequired: %s
conditional.type.incompatible=incompatible types in conditional expression.\nfound   : %s\nrequired: %s
type.argument.type.incompatible=incompatible types in type argument.\nfound   : %s\nrequired: %s
argument.type.incompatible=incompatible types in argument.\nfound   : %s\nrequired: %s
type.incompatible=incompatible types.\nfound   : %s\nrequired: %s
bound.type.incompatible=incompatible bounds in %s\ntype: %s\nupper bound: %s\nlower bound: %s
monotonic.type.incompatible=cannot assign %s to %s (monotonic type).\nfull type found: %s
type.invalid=%s may not be applied to the type "%s"
cast.unsafe="%s" may not be casted to the type "%s"
exception.parameter.invalid=invalid type in catch argument.\nfound   : %s\nrequired: %s
throw.type.invalid=invalid type thrown.\nfound   : %s\nrequired: %s
expression.unparsable.type.invalid=Expression annotation invalid: %s

override.return.invalid=%s in %s cannot override %s in %s; attempting to use an incompatible return type\nfound   : %s\nrequired: %s
override.param.invalid=%s in %s cannot override %s in %s; attempting to use an incompatible parameter type\nfound   : %s\nrequired: %s
override.receiver.invalid=%s in %s cannot override %s in %s; attempting to use an incompatible receiver type\nfound   : %s\nrequired: %s
method.declaration.expression.parameter.name=The annotation on parameter '%s' of method '%s' refers to formal parameter '%s' by name. Please use "#%s" instead of "%s".
methodref.return.invalid=%s in %s is not a valid method reference for %s in %s; attempting to use an incompatible return type\nfound   : %s\nrequired: %s
methodref.param.invalid=%s in %s is not a valid method reference for %s in %s; attempting to use an incompatible parameter type\nfound   : %s\nrequired: %s
methodref.receiver.invalid=%s in %s is not a valid method reference for %s in %s; attempting to use an incompatible receiver type\nfound   : %s\nrequired: %s
methodref.receiver.bound.invalid=%s is not a valid receiver for %s in %s; attempting to use an incompatible receiver type\nfound   : %s\nrequired: %s
lambda.param.type.incompatible=incompatible parameter types in lambda expression.\nfound   : %s\nrequired: %s

method.invocation.invalid=call to %s not allowed on the given receiver.\nfound   : %s\nrequired: %s
constructor.invocation.invalid=creation of %s not allowed with given receiver;\nfound   : %s\nrequired: %s

unallowed.access=access of the field (%s) is not permitted on receiver of type (%s)
cast.redundant=Redundant cast;\ntype   : %s

purity.deterministic.void.method=a deterministic method without return value is redundant
purity.deterministic.constructor=a deterministic constructor is redundant
purity.invalid.overriding=%s in %s cannot override %s in %s; attempting to use an incompatible purity declaration\nfound   : %s\nrequired: %s
purity.invalid.methodref=%s in %s is not a valid method reference for %s in %s; attempting to use an incompatible purity declaration\nfound   : %s\nrequired: %s
purity.not.deterministic.catch=catch block not allowed in deterministic method
purity.not.deterministic.call=call to non-deterministic method not allowed in deterministic method
purity.not.sideeffectfree.call=call to non-side-effect-free method not allowed in side-effect-free method
purity.not.deterministic.not.sideeffectfree.call=call to a non-deterministic non-side-effect-free method not allowed in deterministic side-effect-free method
purity.not.sideeffectfree.object.creation=object creation using a non-side-effect-free constructor not allowed in side-effect-free method
purity.not.deterministic.not.sideeffectfree.object.creation=object creation not allowed in deterministic side-effect-free method
purity.not.deterministic.not.sideeffectfree.assign.field=field assignment not allowed in deterministic side-effect-free method
purity.not.deterministic.not.sideeffectfree.assign.array=array assignment not allowed in deterministic side-effect-free method
purity.not.deterministic.object.creation=object creation not allowed in deterministic method
purity.not.deterministic.assign.field=field assignment not allowed in deterministic method
purity.not.deterministic.assign.array=array assignment not allowed in deterministic method
purity.more.pure=the method %s could be declared as @Pure
purity.more.sideeffectfree=the method %s could be declared as @SideEffectFree
purity.more.deterministic=the method %s could be declared as @Deterministic

flowexpr.parse.index.too.big=the method does not have a parameter %s
flowexpr.parse.error=cannot parse the expression '%s'
flowexpr.parse.context.not.determined=could not determine the context at '%s' with which to parse expressions
flowexpr.parameter.not.final=parameter %s in '%s' is not effectively final (i.e., it gets re-assigned)
contracts.postcondition.not.satisfied=the postcondition about '%s' of this method is not satisfied
contracts.conditional.postcondition.not.satisfied=the conditional postcondition about '%s' at this return statement is not satisfied
contracts.conditional.postcondition.invalid.returntype=this annotation is only valid for methods with return type 'boolean'
contracts.precondition.not.satisfied=the called method '%s' has a precondition '%s' that is not satisfied
contracts.precondition.override.invalid=%s in %s cannot override %s in %s; the precondition '%s' for '%s' in the subclass method must be weaker (or equally strong) compared to the superclass method
contracts.postcondition.override.invalid=%s in %s cannot override %s in %s; the postcondition '%s' for '%s' in the subclass method must be stronger (or equally strong) compared to the superclass method
contracts.conditional.postcondition.true.override.invalid=%s in %s cannot override %s in %s; the conditional postcondition '%s' with result=true for '%s' in the subclass method must be stronger (or equally strong) compared to the superclass method
contracts.conditional.postcondition.false.override.invalid=%s in %s cannot override %s in %s; the conditional postcondition '%s' with result=false for '%s' in the subclass method must be stronger (or equally strong) compared to the superclass method
# Same text as above, but different key.
contracts.precondition.methodref.invalid=the precondition for '%s' in method %s in class %s must be weaker (or equally strong) compared to class %s
contracts.postcondition.methodref.invalid=the postcondition for '%s' in method %s in class %s must be stronger (or equally strong) compared to class %s
contracts.conditional.postcondition.true.methodref.invalid=the conditional postcondition with result=true for '%s' in method %s must be stronger (or equally strong) compared to class %s
contracts.conditional.postcondition.false.methodref.invalid=the conditional postcondition with result=false for '%s' in method %s in class %s must be stronger (or equally strong) compared to class %s
contracts.precondition.expression.parameter.name=The precondition on the declaration of method '%s' refers to formal parameter '%s' by name. Please use "#%s" instead of "%s".
contracts.postcondition.expression.parameter.name=The postcondition on the declaration of method '%s' refers to formal parameter '%s' by name. Please use "#%s" instead of "%s".
contracts.conditional.postcondition.expression.parameter.name=The conditional postcondition on the declaration of method '%s' refers to formal parameter '%s' by name. Please use "#%s" instead of "%s".

lambda.unimplemented=This version of the Checker Framework does not type-check lambda expressions.
methodref.inference.unimplemented=This version of the Checker Framework does not type-check method references with implicit type arguments.
