// Generated by delombok at Tue Aug 06 13:04:10 PDT 2019

import java.util.List;

public class LombokSingularExample {
    @lombok.NonNull List<Object> items;

    // This one should be permitted, because @Singular will
    // produce an empty list even if one is not specified directly.
    public static void testNoItems() {
        LombokSingularExample.builder().build();
    }

    // This call should also be permitted, even though items() is
    // not called, because the list will be automatically initialized.
    public static void testOneItem() {
        LombokSingularExample.builder().item(new Object()).build();
    }

    public static void testWithList(List<Object> l) {
        LombokSingularExample.builder().items(l).build();
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    LombokSingularExample(@lombok.NonNull final List<Object> items) {
        if (items == null) {
            throw new java.lang.NullPointerException("items is marked non-null but is null");
        }
        this.items = items;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static class LombokSingularExampleBuilder {
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private java.util.ArrayList<Object> items;

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        LombokSingularExampleBuilder() {}

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public LombokSingularExampleBuilder item(final Object item) {
            if (this.items == null) this.items = new java.util.ArrayList<Object>();
            this.items.add(item);
            return this;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public LombokSingularExampleBuilder items(
                final java.util.Collection<? extends Object> items) {
            if (this.items == null) this.items = new java.util.ArrayList<Object>();
            this.items.addAll(items);
            return this;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public LombokSingularExampleBuilder clearItems() {
            if (this.items != null) this.items.clear();
            return this;
        }

        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public LombokSingularExample build() {
            java.util.List<Object> items;
            switch (this.items == null ? 0 : this.items.size()) {
                case 0:
                    items = java.util.Collections.emptyList();
                    break;
                case 1:
                    items = java.util.Collections.singletonList(this.items.get(0));
                    break;
                default:
                    items =
                            java.util.Collections.unmodifiableList(
                                    new java.util.ArrayList<Object>(this.items));
            }
            return new LombokSingularExample(items);
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "LombokSingularExample.LombokSingularExampleBuilder(items=" + this.items + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public static LombokSingularExampleBuilder builder() {
        return new LombokSingularExampleBuilder();
    }
}
