## This file, checker/jdk/Makefile.jdk, is included from
## each subdirectory of checker/jdk/ .  For example,
## checker/jdk/nullness/Makefile includes this file.


# Variables
CHECKERFRAMEWORK ?= ../../..
CHECKER_JAVAC ?= $(CHECKERFRAMEWORK)/checker/bin-devel/javac

LANGTOOLS ?= ../../../../jsr308-langtools
LANGTOOLSDIST ?= $(LANGTOOLS)/dist
JAVADOCLIB ?= $(LANGTOOLSDIST)/../build/classes
JAVAC ?= $(LANGTOOLSDIST)/bin/javac -Xlint
JAVAP ?= $(LANGTOOLSDIST)/bin/javap

RTJAR ?= $(JAVA_HOME)/jre/lib/rt.jar

ANNOTATION_TOOLS ?= ../../../../annotation-tools
AFU_SCRIPTS ?= $(ANNOTATION_TOOLS)/annotation-file-utilities/scripts

all: clean classes
# Separate make command because BUILD_CLASSES needs to be recomputed.
	$(MAKE) jaifs annotated

clean:
	rm -rf build

build: classes


############## Validate annotated jdk against missing methods ##############

SOURCES = $(shell find src/java src/javax src/org -name '[A-Za-z_]*.java' | sort)
# CLASSES = $(shell find src/java src/javax src/org -name '*.class' | sort)
DIFFS = $(patsubst src/%.java,build/%.diff, $(SOURCES))

.PHONY: classes
classes: $(SOURCES)
	mkdir -p build
	@echo "Building the JDK..."
	@echo 'Ignore "warning: You do not seem to be using the distributed annotated JDK."'
# "-AsuppressWarnings=$(JDKDIR) -Afilenames" produces frequent, but not verbose, output, so that
# the Travis job doesn't time out and also doesn't exceed the maximum log size.
# TODO: fix all issues and remove -Awarns
	@$(CHECKER_JAVAC) -J-Xmx2500M -XDignore.symbol.file -d build -processor $(JDKDIR) -Awarns -AsuppressWarnings=$(JDKDIR) -Afilenames -Xmaxwarns 5000 $?

build/%.expected: build/%.class
	@$(JAVAP) -cp $(JAVADOCLIB) $(subst /,.,$*)  | grep public | sed 's/ native / /g' | sed 's/? extends java\/lang\/Object/?/g' | sort > $@

build/%.actual: build/%.class
	@$(JAVAP) -Xbootclasspath/p:build $(subst /,.,$*)  | grep public | sed 's/ native / /g' | sed 's/? extends java\/lang\/Object/?/g' | sort > $@

build/%.diff: build/%.expected build/%.actual
	@echo "validating class:" $(subst /,.,$*)
	diff $? > $@

validate: classes $(DIFFS)

############## Annotate the annotated jdk file ##############

# Problem: build/java doesn't exist until after the "classes" target has
# run!  This means that a new make process must be started, after the
# "classes" rule has executed, before any rule that uses these variables.
# Furthermore, these shell commands may issue errors saying that build/java
# does not exist.  So long as the variables are not used on such a make
# invocation, this doesn't cause a problem, but it is irritating (and a bit
# sloppy).
BUILD_CLASSES = $(shell find build/java build/javax build/org -name '*.class' | sort)
JAIFS = $(patsubst build/%.class,build/%.jaif, $(BUILD_CLASSES))
ANNOTATED = $(patsubst build/%.class,annotated/%.class, $(BUILD_CLASSES))

build/%.jaif: build/%.class
	@$(AFU_SCRIPTS)/extract-annotations '$<'

jaifs: $(JAIFS)

annotated/%.class: build/%.jaif
	@$(AFU_SCRIPTS)/insert-annotations '../$@' '$<'

annotated: $(ANNOTATED)

showvars:
	pwd
	@echo BUILD_CLASSES: ${BUILD_CLASSES}
	@echo JAIFS: ${JAIFS}
	@echo ANNOTATED: ${ANNOTATED}
