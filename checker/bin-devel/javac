#!/bin/sh

#
# This file simply redirects all passed arguments
# to org.checkerframework.framework.util.CheckerDevelMain
#
# This script loads the .class files found in the
# build directory before it uses any jar files.
# Thus, a user can just do
#   ant build
# to debug changes rather than creating .jar files with "ant dist-nobuildjdk".

# When editing, keep this file in sync with javac-debug in this directory.

mydir="`dirname $0`"
case `uname -s` in
    CYGWIN*)
      mydir=`cygpath -m $mydir`
      ;;
esac

binaryDir="${mydir}"/../dist

# langtools bin dir for Jenkins
if [ -z "${LT_BIN}" ] || [ "${LT_BIN}" = "" ]; then
   ltBinDir="${mydir}"/../../../jsr308-langtools/build/classes
else
   ltBinDir="${LT_BIN}"
fi

jdkPaths="${mydir}"/../jdk/annotated

cfDir="${mydir}"/../..
annoToolsDir="${cfDir}"/../annotation-tools
stubparserDir="${cfDir}"/../stubparser

# Put afu jar files last, as they might contain out-of-date CF files.
# Put "checker" after the other sub-projects, as "ant bindist" puts
# other projects into the checker/build directory.
buildDirs="${cfDir}"/dataflow/build:"${cfDir}"/javacutil/build:"${cfDir}"/framework/build:"${cfDir}"/checker/build:"${stubparserDir}"/stubparser.jar:"${annoToolsDir}"/scene-lib/bin:"${annoToolsDir}"/annotation-file-utilities/annotation-file-utilities.jar

## Preserve quoting and spaces in arguments, which would otherwise be lost
## due to being passed through the shell twice.
# Unset IFS and use newline as arg separator to preserve spaces in args
DUALCASE=1  # for MKS: make case statement case-sensitive (6709498)
saveIFS="$IFS"
nl='
'
for i in "$@" ; do
   IFS=
   args=$args$nl"'"$i"'"
   IFS="$saveIFS"
done

# TODO: We really only want the qualifiers on the CP, but there is no
# easy way to determine them here. ../bin/javac can use
# checker-qual.jar, but it might not exist yet.
# Set .cp to all build directories for now.

# Add the following option for verbose output:
#     "-DCheckerDevelMain.verbose=TRUE" \

eval "java" \
     "-ea " \
     "-DCheckerDevelMain.cp=${buildDirs} " \
     "-DCheckerDevelMain.pp=${buildDirs} " \
     "-DCheckerDevelMain.compile.bcp=${jdkPaths} " \
     "-DCheckerDevelMain.runtime.cp=${ltBinDir} " \
     "-DCheckerDevelMain.binary=${binaryDir}" \
     "-classpath ${buildDirs} " \
     "org.checkerframework.framework.util.CheckerDevelMain" \
     "-AprintErrorStack" \
     ${args}
