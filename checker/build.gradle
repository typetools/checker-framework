sourceSets {
    main {
        resources {
            // Stub files, message.properties, etc.
            srcDirs = ['src/main/java']
            exclude '**/*.java'
        }
    }
    testannotations
}

dependencies {
    compile project(':framework')
    compile project(':dataflow')
    compile project(':javacutil')
    compile project(':checker-qual')

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile project(':util')
    testCompile sourceSets.testannotations.output

    testannotationsCompile project(':checker-qual')
}

jar {
    manifest {
        attributes("Main-Class": "org.checkerframework.framework.util.CheckerMain")
    }
}

task downloadJdk() {
    description 'Downloads jdk8.jar and copies it to checker/dist'
    // See instructions for updating the jdk.jar at https://github.com/typetools/annotated-libraries/blob/master/README.md
    String shaHash = '3e57e020050ee8b679622e7f864e7dff17aa8acc'
    File jdk = new File(buildDir, "jdk8-${shaHash}.jar");
    onlyIf {
        !rootProject.hasProperty("localJdk") && (!jdk.exists() || !(new File('"dist/jdk8.jar').exists()))
    }

    doLast {
        // If localJdk is set (regardless of what value it is set to), then use jdk/jdk.jar instead of downloading.
        if (rootProject.hasProperty("localJdk")) {
            copy {
                from 'jdk/jdk.jar'
                rename { String fileName ->
                    fileName.replace(fileName, "jdk8.jar")
                }
                into 'jdk'
            }

            copy {
                from 'jdk/jdk8.jar'
                into 'dist'
            }
        } else {
            if (!jdk.exists()) {
                download {
                    src "https://github.com/typetools/annotated-libraries/raw/${shaHash}/jdk8.jar"
                    overwrite true
                    dest jdk
                }
            }
            copy {
                from(jdk) {
                    rename jdk.name, 'jdk8.jar'
                }
                into "dist"
            }
        }
    }
}

task copyJarsToDist(dependsOn: shadowJar, group: 'Build') {
    description 'Builds or downloads jars required by CheckerMain and puts them in checker/dist.'
    dependsOn project(':checker-qual').tasks.jar
    // Also moves jdk8.jar to checker/dist
    dependsOn downloadJdk
    doLast {
        copy {
            from file(project(':checker-qual').tasks.getByName("jar").archivePath)
            into "${projectDir}/dist"
            rename { String fileName ->
                // remove version number on checker-qual.jar
                fileName.replace(fileName, "checker-qual.jar")
            }
        }

        copy {
            from configurations.javacJar
            into "${projectDir}/dist"
            rename { String fileName ->
                fileName.replace(fileName, "javac.jar")
            }
        }
    }
}
assemble.dependsOn copyJarsToDist

task buildJdk(type: Jar, group: 'Build', dependsOn: copyJarsToDist) {
    description 'Builds jdk8.jar; other tasks must pass -PlocalJdk= to use built jdk8.jar.'

    doLast {
        if (System.getenv('JAVA_HOME') == null) {
            throw new GradleException("Environment variable JAVA_HOME is not set.")
        }
        exec {
            executable 'make'
            environment CHECKERFRAMEWORK: "${projectDir}/..",
                    LANGTOOLS: "${jsr308}/jsr308-langtools",
                    ANNOTATION_TOOLS: "${afu}/..",
                    CLASSPATH: project(':checker').tasks.getByName('shadowJar').archivePath,
                    LT_BIN: "${jsr308}/jsr308-langtools/dist/bin"
            args += ["-C", "../checker/jdk/"]
        }

        copy {
            from 'jdk/jdk.jar'
            rename { String fileName ->
                fileName.replace(fileName, "jdk8.jar")
            }
            into 'jdk'
        }

        copy {
            from 'jdk/jdk8.jar'
            into 'dist'
        }
    }
}

shadowJar {
    description 'Creates the "fat" checker.jar in dist.'
    destinationDir = file("${projectDir}/dist")
    archiveName = "checker.jar"
}
artifacts {
    archives shadowJar
}

clean {
    delete "${projectDir}/dist"
}

// Add non-junit tests
createCheckTypeTask(project.name, 'org.checkerframework.checker.compilermsgs.CompilerMessagesChecker', "CompilerMessages")
checkCompilerMessages {
    doFirst {
        options.compilerArgs += [
                '-Apropfiles=' + sourceSets.main.resources.filter { file -> file.name.equals('messages.properties') }.asPath + ":"
                        + project(':framework').sourceSets.main.resources.filter { file -> file.name.equals('messages.properties') }.asPath
        ]
    }
}

task nullnessExtraTests(type: Exec, dependsOn: copyJarsToDist, group: 'Verification') {
    description 'Run extra tests for the Nullness Checker.'
    executable 'make'
    environment JAVAC: "${projectDir}/bin/javac", JAVAP: 'javap'
    args = ['-C', 'tests/nullness-extra/']
}

task commandLineTests(type: Exec, dependsOn: copyJarsToDist, group: 'Verification') {
    description 'Run tests that need a special command line.'
    executable 'make'
    environment JAVAC: "${projectDir}/bin/javac"
    args = ['-C', 'tests/command-line/']
}

task tutorialTests(dependsOn: copyJarsToDist, group: 'Verification') {
    description 'Test that the tutorial is working as expected.'
    doLast {
        ant.ant(dir: "${rootDir}/docs/tutorial/tests", useNativeBasedir: 'true', inheritAll: 'false') {
            target(name: 'check-tutorial')
        }
    }
}

task exampleTests(type: Exec, dependsOn: copyJarsToDist, group: 'Verification') {
    description 'Run tests for the example programs.'
    executable 'make'
    environment JAVAC: "${projectDir}/bin/javac"
    args = ['-C', '../docs/examples']
}

task demosTests(dependsOn: copyJarsToDist, group: 'Verification') {
    description 'Test that the demos are working as expected.'
    doLast {
        File demosDir = new File(projectDir, '../../checker-framework-demos');
        if (!demosDir.exists()) {
            exec {
                workingDir file(demosDir.toString() + '/../')
                executable 'git'
                args = ['clone', 'https://github.com/typetools/checker-framework.demos.git', 'checker-framework-demos']
            }
        } else {
            exec {
                workingDir demosDir
                executable 'git'
                args = ['pull', 'https://github.com/typetools/checker-framework.demos.git']
                ignoreExitValue = true
            }
        }
        ant.properties.put('checker.lib', file("${projectDir}/dist/checker.jar").absolutePath)
        ant.ant(dir: demosDir.toString())
    }
}

task allNullnessTests(type: Test, group: 'Verification') {
    description 'Run all Junit tests for the Nullness Checker.'
    include '**/Nullness*.class'
}
