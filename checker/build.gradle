plugins {
    // To only load the parts of the AWS SDK needed to test the Called Methods Checker, rather
    // than the whole AWS SDK. Uses the "legacy" version listed here:
    // https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/setup-project-gradle.html,
    // because the build fails with the Gradle 5+ way, saying that it can't find ec2.
    // I believe that this is because the CF only needs the AWS SDK during testing, not during the build.
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
}

sourceSets {
    main {
        resources {
            // Stub files, message.properties, etc.
            srcDirs += ['src/main/java']
        }
    }
    testannotations
}

dependencies {
    implementation project(':javacutil')
    implementation project(':dataflow')
    implementation project(':framework')
    // AFU is an "includedBuild" imported in checker-framework/settings.gradle, so the version number doesn't matter.
    // https://docs.gradle.org/current/userguide/composite_builds.html#settings_defined_composite
    implementation('org.checkerframework:annotation-file-utilities:*') {
        exclude group: 'com.google.errorprone', module: 'javac'
    }
    implementation project(':checker-qual')
    // As of 2019-12-16, the version of reflection-util in the Annotation
    // File Utilities takes priority over this version, in the fat jar
    // file. :-( So update it and re-build it locally when updating this.
    implementation 'org.plumelib:reflection-util:1.0.2'
    implementation 'org.plumelib:plume-util:1.3.0'

    // Called Methods Checker AutoValue + Lombok support
    testImplementation "com.google.auto.value:auto-value-annotations:1.7.4"
    testImplementation "com.google.auto.value:auto-value:1.7.4"
    testImplementation "com.ryanharter.auto.value:auto-value-parcel:0.2.8"
    testImplementation "org.projectlombok:lombok:1.18.16"
    // Called Methods Checker support for detecting misuses of AWS APIs
    testImplementation "com.amazonaws:aws-java-sdk-ec2"
    testImplementation "com.amazonaws:aws-java-sdk-kms"

    testImplementation group: 'junit', name: 'junit', version: '4.13.1'
    testImplementation project(':framework-test')
    testImplementation sourceSets.testannotations.output

    testannotationsImplementation project(':checker-qual')
}

// The AWS SDK is used for testing the Called Methods Checker.
dependencyManagement {
    imports {
        mavenBom "com.amazonaws:aws-java-sdk-bom:1.11.923"
    }
}

jar {
    manifest {
        attributes("Main-Class": "org.checkerframework.framework.util.CheckerMain")
    }
    doLast {
        new File("$projectDir/build/libs/README.txt").text =
"""Do not use file checker-X.Y.Z.jar, which contains only the checker subproject
and lacks other parts of the Checker Framework.
Instead, use checker/dist/checker.jar.
"""
    }
}

task copyJarsToDist(dependsOn: shadowJar, group: 'Build') {
    description 'Builds or downloads jars required by CheckerMain and puts them in checker/dist.'
    dependsOn project(':checker-qual').tasks.jar
    doLast {
        copy {
            from file(project(':checker-qual').tasks.getByName("jar").archivePath)
            into "${projectDir}/dist"
            rename { String fileName ->
                // remove version number on checker-qual.jar
                fileName.replace(fileName, "checker-qual.jar")
            }
        }

        copy {
            from configurations.javacJar
            into "${projectDir}/dist"
            rename { String fileName ->
                fileName.replace(fileName, "javac.jar")
            }
        }
    }
}

assemble.dependsOn copyJarsToDist

task printPlumeUtilJarPath {
    description "Print the path to plume-util.jar"
    doFirst { println project.configurations.compile.find { it.name.startsWith("plume-util") } }
}

task allSourcesJar(type: Jar) {
    description 'Creates a sources jar that includes sources for all Checker Framework classes in checker.jar'
    destinationDirectory = file("${projectDir}/dist")
    archiveFileName = "checker-source.jar"
    from (sourceSets.main.java, project(':framework').sourceSets.main.allJava,
            project(':dataflow').sourceSets.main.allJava, project(':javacutil').sourceSets.main.allJava)
}

task allJavadocJar(type: Jar) {
    description 'Creates javadoc jar include Javadoc for all of the framework'
    dependsOn rootProject.tasks.allJavadoc
    destinationDirectory = file("${projectDir}/dist")
    archiveFileName = "checker-javadoc.jar"
    from rootProject.tasks.allJavadoc.destinationDir
}


shadowJar {
    description 'Creates the "fat" checker.jar in dist/.'
    destinationDirectory = file("${projectDir}/dist")
    archiveFileName = "checker.jar"
    // To see what files are incorporated into the shadow jar file:
    // doFirst { println sourceSets.main.runtimeClasspath.asPath }
}
artifacts {
    // Don't add this here or else the Javadoc and the sources jar is built during the assemble task.
    // archives allJavadocJar
    // archives allSourcesJar
    archives shadowJar
}

clean {
    delete "${projectDir}/dist"
    delete "tests/calledmethods-delomboked"
    delete("tests/wpi-testchecker/annotated")
    delete("tests/wpi-testchecker/inference-output")
}

// Add non-junit tests
createCheckTypeTask(project.name,, "CompilerMessages",
    'org.checkerframework.checker.compilermsgs.CompilerMessagesChecker')
checkCompilerMessages {
    doFirst {
        options.compilerArgs += [
                '-Apropfiles=' + sourceSets.main.resources.filter { file -> file.name.equals('messages.properties') }.asPath + ":"
                        + project(':framework').sourceSets.main.resources.filter { file -> file.name.equals('messages.properties') }.asPath
        ]
    }
}

task nullnessExtraTests(type: Exec, dependsOn: copyJarsToDist, group: 'Verification') {
    description 'Run extra tests for the Nullness Checker.'
    executable 'make'
    environment JAVAC: "${projectDir}/bin/javac", JAVAP: 'javap'
    args = ['-C', 'tests/nullness-extra/']
}

task commandLineTests(type: Exec, dependsOn: copyJarsToDist, group: 'Verification') {
    description 'Run tests that need a special command line.'
    executable 'make'
    environment JAVAC: "${projectDir}/bin/javac"
    args = ['-C', 'tests/command-line/']
}

task tutorialTests(dependsOn: copyJarsToDist, group: 'Verification') {
    description 'Test that the tutorial is working as expected.'
    doLast {
        ant.ant(dir: "${rootDir}/docs/tutorial/tests", useNativeBasedir: 'true', inheritAll: 'false') {
            target(name: 'check-tutorial')
        }
    }
}

task exampleTests(type: Exec, dependsOn: copyJarsToDist, group: 'Verification') {
    description 'Run tests for the example programs.'
    executable 'make'
    environment JAVAC: "${projectDir}/bin/javac"
    args = ['-C', '../docs/examples']
}

task demosTests(dependsOn: copyJarsToDist, group: 'Verification') {
    description 'Test that the demos are working as expected.'
    doLast {
        if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
            File demosDir = new File(projectDir, '../../checker-framework.demos');
            if (!demosDir.exists()) {
                exec {
                    workingDir file(demosDir.toString() + '/../')
                    executable 'git'
                    args = ['clone', '--depth', '1', 'https://github.com/typetools/checker-framework.demos.git']
                }
            } else {
                exec {
                    workingDir demosDir
                    executable 'git'
                    args = ['pull', 'https://github.com/typetools/checker-framework.demos.git']
                    ignoreExitValue = true
                }
            }
            ant.properties.put('checker.lib', file("${projectDir}/dist/checker.jar").absolutePath)
            ant.ant(dir: demosDir.toString())
        } else {
            println("Skipping demosTests because they only work with Java 8.")
        }
    }
}

task allNullnessTests(type: Test, group: 'Verification') {
    description 'Run all Junit tests for the Nullness Checker.'
    include '**/Nullness*.class'
}

task allCalledMethodsTests(type: Test, group: 'Verification') {
    description 'Run all Junit tests for the Called Methods Checker.'
    include '**/CalledMethods*.class'
    dependsOn 'delombok'
}

// These are tests that should only be run with JDK 11.
task jtregJdk11Tests(dependsOn: ':downloadJtreg', group: 'Verification') {
    description 'Run the jtreg tests made for JDK 11.'
    dependsOn('compileJava')
    dependsOn('compileTestJava')
    dependsOn('shadowJar')

    String jtregOutput = "${buildDir}/jtregJdk11"
    String name = 'all'
    doLast {
        if (isJava8) {
            println "This test is only run with JDK 11."
            return;
        }
        exec {
            executable "${jtregHome}/bin/jtreg"
            args = [
                    "-dir:${projectDir}/jtregJdk11",
                    "-workDir:${jtregOutput}/${name}/work",
                    "-reportDir:${jtregOutput}/${name}/report",
                    "-verbose:summary",
                    "-javacoptions:-g",
                    "-keywords:!ignore",
                    "-samevm",
                    "-javacoptions:-classpath ${tasks.shadowJar.archiveFile.get()}:${sourceSets.test.output.asPath}",
                    "-vmoptions:-classpath ${tasks.shadowJar.archiveFile.get()}:${sourceSets.test.output.asPath}",
                    "-vmoptions:--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED",
                    "-javacoptions:-classpath ${sourceSets.testannotations.output.asPath}",
                    // Location of jtreg tests
                    '.'
            ]
        }


    }
}

// JSpecify tests are excluded by default.  To run them:
// ./gradlew NullnessJspecifySamplesTest
test {
    exclude '**/org/checkerframework/checker/test/junit/NullnessJspecifySamplesTest.class'
}


task deployArtifactsToLocalRepo(dependsOn: shadowJar) {
    description 'Deploys checker.jar to the local Maven repository'
    doLast {
        mvnDeployToLocalRepo("${projectDir}/dist/checker.jar", "${pomFiles}/checker-pom.xml")
    }
}

task deployArtifactsToSonatype {
    description 'Deploys checker.jar (and their sources/javadoc jars) to the Sonatype repository'
    description 'Deploys checker.jar (and their sources/javadoc jars) to the Sonatype repository'
    dependsOn (shadowJar, 'allSourcesJar', 'allJavadocJar')
    doLast {
        mvnSignAndDeployMultipleToSonatype("${projectDir}/dist/checker.jar", allSourcesJar.archiveFile.get().toString(), allJavadocJar.archiveFile.get().toString(), "${pomFiles}/checker-pom.xml")
    }
}

task delombok {
    description 'Delomboks the source code tree in tests/calledmethods-lombok'

    def srcDelomboked = 'tests/calledmethods-delomboked'
    def srcJava = 'tests/calledmethods-lombok'

    inputs.files file(srcJava)
    outputs.dir file(srcDelomboked)

    // Because there are Checker Framework annotations in the test source.
    dependsOn project(':checker-qual').tasks.jar

    doLast {
        def collection = files(configurations.testCompileClasspath)
        ant.taskdef(name: 'delombok', classname: 'lombok.delombok.ant.Tasks$Delombok',
                classpath: collection.asPath)
        ant.delombok(from: srcJava, to: srcDelomboked, classpath: collection.asPath)
    }
}

tasks.test.dependsOn("delombok")

///
/// Whole-program inference tests
///

test {
    useJUnit {
        // These are run in task wholeProgramInferenceTests.
        excludeCategories 'org.checkerframework.checker.test.junit.wpirunners.WholeProgramInferenceTestCheckerJaifsTest'
        excludeCategories 'org.checkerframework.checker.test.junit.wpirunners.WholeProgramInferenceTestCheckerStubsTest'
        excludeCategories 'org.checkerframework.checker.test.junit.wpirunners.WholeProgramInferenceTestCheckerAjavaTest'
    }
}

task testWpiTestCheckerStubs(type: Test) {
    description 'Internal task to run the wpi-testchecker tests with -Ainfer=stubs to generate stub files'

    dependsOn(compileTestJava)
    doFirst {
        delete("tests/wpi-testchecker/annotated")
        delete("${buildDir}/wpi-testchecker/")
    }
    outputs.upToDateWhen { false }
    include '**/WholeProgramInferenceTestCheckerStubsTest.class'
    testLogging {
        // Always run the tests
        outputs.upToDateWhen { false }

        // Show the found unexpected diagnostics and the expected diagnostics not found.
        exceptionFormat "full"
        events "passed", "skipped", "failed"
    }

    doLast {
        copyNonannotatedToAnnotatedDirectory("wpi-testchecker")
        // The stub file format doesn't support annotations on anonymous inner classes, so
        // this test also expects errors on UsesAnonymous.java.
        delete('tests/wpi-testchecker/annotated/UsesAnonymous.java')
        copy {
            from file('tests/wpi-testchecker/non-annotated/UsesAnonymous.java')
            into file('tests/wpi-testchecker/annotated')
        }
    }
}

task testWpiTestCheckerStubsValidate(type: Test) {
    description 'Internal task to re-run the wpi-testchecker tests using the stub files generated by testWpiTestCheckerStubs'

    dependsOn(testWpiTestCheckerStubs)
    outputs.upToDateWhen { false }
    include '**/WholeProgramInferenceTestCheckerStubsValidationTest.class'
    testLogging {
        // Always run the tests
        outputs.upToDateWhen { false }

        // Show the found unexpected diagnostics and the expected diagnostics not found.
        exceptionFormat "full"
        events "passed", "skipped", "failed"
    }
}

task testWpiTestCheckerAjava(type: Test) {
    description 'Internal task to run the wpi-testchecker tests with -Ainfer=ajava to generate stub files'

    dependsOn(compileTestJava)
    doFirst {
        delete("tests/wpi-testchecker/annotated")
        delete("${buildDir}/wpi-testchecker/")
    }
    outputs.upToDateWhen { false }
    include '**/WholeProgramInferenceTestCheckerAjavaTest.class'
    testLogging {
        // Always run the tests
        outputs.upToDateWhen { false }

        // Show the found unexpected diagnostics and the expected diagnostics not found.
        exceptionFormat "full"
        events "passed", "skipped", "failed"
    }

    doLast {
        copyNonannotatedToAnnotatedDirectory("wpi-testchecker")
    }
}

task testWpiTestCheckerAjavaValidate(type: Test) {
    description 'Internal task to re-run the wpi-testchecker tests using the ajava files generated by testWpiTestCheckerAjava'

    dependsOn(testWpiTestCheckerAjava)
    outputs.upToDateWhen { false }
    include '**/WholeProgramInferenceTestCheckerAjavaValidationTest.class'
    testLogging {
        // Always run the tests
        outputs.upToDateWhen { false }

        // Show the found unexpected diagnostics and the expected diagnostics not found.
        exceptionFormat "full"
        events "passed", "skipped", "failed"
    }
}

// Copies directories as needed by WPI tests.
// Formal parameter testdir is, for example, "wpi-testchecker".
// Does work in directory "tests/${testdir}/".
// 1. Copies whole-program inference test source code from the non-annotated/ to the annotated/ directory.
// 2. Copies WPI output, such as .jaif or .stub files, to the inferference-output/ directory.
void copyNonannotatedToAnnotatedDirectory(String testdir) {
    // Copying all test files to another directory, removing all expected errors that should not
    // occur after inserting inferred annotations from .jaif files.
    copy {
        from files("tests/${testdir}/non-annotated")
        into file("tests/${testdir}/annotated")
        filter { String line ->
            line.contains('// :: error:') ? null : line
        }
    }
    // The only file for which expected errors are maintained is ExpectedErrors.java, so we copy it over.
    delete("tests/${testdir}/annotated/ExpectedErrors.java")
    copy {
        from file("tests/${testdir}/non-annotated/ExpectedErrors.java")
        into file("tests/${testdir}/annotated")
    }

    delete("tests/${testdir}/inference-output")
    file("build/whole-program-inference").renameTo(file("tests/${testdir}/inference-output"))
}

// This task is similar to the wholeProgramInferenceTestCheckerJaifTests task below, but it doesn't
// run the insert-annotations-to-source tool. Instead, it tests the -Ainfer=stubs feature
// and the -AmergeStubsWithSource feature to do WPI using stub files.
task wholeProgramInferenceTestCheckerStubTests(dependsOn: 'shadowJar', group: 'Verification') {
    description 'Run tests for whole-program inference using stub files'
    dependsOn(testWpiTestCheckerStubsValidate)
    outputs.upToDateWhen { false }
}

// Like wholeProgramInferenceTestCheckerStubTests, but with ajava files instead
task wholeProgramInferenceTestCheckerAjavaTests(dependsOn: 'shadowJar', group: 'Verification') {
    description 'Run tests for whole-program inference using ajava files'
    dependsOn(testWpiTestCheckerAjavaValidate)
    outputs.upToDateWhen { false }
}

task testWpiTestCheckerJaifs(type: Test) {
    description 'Internal task to run the wpi-testchecker tests with -Ainfer=jaifs to generate .jaif files'

    dependsOn(compileTestJava)
    doFirst {
        delete("tests/wpi-testchecker/annotated")
    }
    outputs.upToDateWhen { false }
    include '**/WholeProgramInferenceTestCheckerJaifsTest.class'
    testLogging {
        // Always run the tests
        outputs.upToDateWhen { false }

        // Show the found unexpected diagnostics and expected diagnostics not found.
        exceptionFormat "full"
        events "passed", "skipped", "failed"
    }

    doLast {
        copyNonannotatedToAnnotatedDirectory("wpi-testchecker")

        // JAIF-based WPI fails these tests, which was added for stub-based WPI.
        // See issue here: https://github.com/typetools/checker-framework/issues/3009
        delete('tests/wpi-testchecker/annotated/ConflictingAnnotationsTest.java')
        delete('tests/wpi-testchecker/annotated/MultiDimensionalArrays.java')

        // Inserting annotations from .jaif files in-place.
        String jaifsDir = "tests/wpi-testchecker/inference-output";
        List<File> jaifs = fileTree(jaifsDir).matching {
            include '*.jaif'
        }.asList()
        if (jaifs.isEmpty()) {
            throw new GradleException("no .jaif files found in ${jaifsDir}")
        }
        String javasDir = "tests/wpi-testchecker/annotated/";
        List<File> javas = fileTree(javasDir).matching {
            include '*.java'
        }.asList()
        if (javas.isEmpty()) {
            throw new GradleException("no .java files found in ${javasDir}")
        }
        exec {
            executable "${afu}/scripts/insert-annotations-to-source"
            args = ['-i']
            for (File jaif : jaifs) {
                args += [jaif.toString()]
            }
            for (File javaFile : javas) {
                args += [javaFile.toString()]
            }
        }
    }
}

task testWpiTestCheckerJaifsValidate(type: Test) {
    description 'Internal task to re-run the wpi-testchecker tests using the .jaif files generated by testWpiTestCheckerJaifs'

    dependsOn(testWpiTestCheckerJaifs)
    outputs.upToDateWhen { false }
    include '**/WholeProgramInferenceTestCheckerJaifsValidationTest.class'
    testLogging {
        // Always run the tests
        outputs.upToDateWhen { false }

        // Show the found unexpected diagnostics and expected diagnostics not found.
        exceptionFormat "full"
        events "passed", "skipped", "failed"
    }
}

task wholeProgramInferenceTestCheckerJaifTests(dependsOn: 'shadowJar', group: 'Verification') {
    description 'Run tests for whole-program inference using .jaif files'
    dependsOn(testWpiTestCheckerJaifsValidate)
    outputs.upToDateWhen { false }
}

// Empty task that just runs both the jaif and stub WPI tests.
// It is run as part of the nonJunitTests task.
task wholeProgramInferenceTests() {
    description "Run tests for all whole program inference modes."
    dependsOn('wholeProgramInferenceTestCheckerJaifTests')
    dependsOn('wholeProgramInferenceTestCheckerStubTests')
    dependsOn('wholeProgramInferenceTestCheckerAjavaTests')
}

// This is run as part of the nonJunitTests task.
task wpiScriptsTests(group: "Verification") {
    description 'Tests the wpi-many.sh script (and indirectly the wpi.sh script). Requires an Internet connection.'

    // This test must always be re-run when requested.
    outputs.upToDateWhen { false }

    doFirst {
        delete("${project.projectDir}/build/wpi-many-tests-results/")
    }

    doLast {
        // Run wpi-many.sh
        exec {
            commandLine 'bin/wpi-many.sh',
                    '-i', "${project.projectDir}/tests/wpi-many/testin.txt",
                    '-o', "${project.projectDir}/build/wpi-many-tests",
                    '--', '--checker', 'nullness,interning,lock,regex,signature'
        }
        // collect the logs from running WPI
        def logFiles = fileTree("${project.projectDir}/build/wpi-many-tests-results/").matching {
            include "**/*.log"
        }
        if (logFiles.size() == 0) {
            throw new GradleException("Failure: WPI scripts did not produce any log files.")
        }

        // check that WPI causes the expected builds to succeed
        logFiles.visit { FileVisitDetails details ->
            def content = details.getFile().readLines()
            // TODO: why does the call to get() below throw an exception if the log files
            // are empty if this check isn't present?
            if (content.size() - 1 < 0) {
                throw new GradleException("Failure: WPI produced empty log files.")
            } else {
                // iterate backwards and look for errors in the last WPI loop,
                // and set success to false if any are found
                for (int i = content.size() - 1; i--; i >= 0) {
                    def line = content.get(i)
                    // DLJC prints this string before each command that it runs.
                    if (line.startsWith("Running ")) {
                        break
                    }
                    if (line.toLowerCase().contains("error")) {
                        throw new GradleException("Failure: WPI scripts produced at least one error. " +
                                "See ${project.projectDir}/build/wpi-many-tests-results/" + details.getName() + ". " +
                                "Failing line is the following: " + line)
                    }
                }
            }
        }
    }
}
