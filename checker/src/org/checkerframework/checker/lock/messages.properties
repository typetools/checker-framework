### Error messages for the Lock Checker
contracts.precondition.not.satisfied=unguarded call to method '%s' requiring '%s' to be held
contracts.precondition.not.satisfied.field=unguarded access to field, variable or parameter '%s' guarded by '%s'
override.sideeffect.invalid=%s in %s cannot override %s in %s; the side-effect annotation on an overridder method must be at least as strong as that one the overridden method
multiple.sideeffect.annotations=method is annotated with multiple side effect annotations
method.guarantee.violated=%s method %s calls method %s with a weaker %s side effect guarantee
cannot.dereference=cannot dereference expression %s with refined type %s
primitive.type.guardedby=primitive types, boxed primitive types and Strings may not be annotated with any qualifier from the @GuardedBy hierarchy
explicit.lock.synchronized=expression of synchronized block is an explicit lock
guardsatisfied.with.mayreleaselocks=a method annotated with @MayReleaseLocks may not have a formal parameter or receiver annotated with @GuardSatisfied
guardsatisfied.parameters.must.match=%s and %s on the declaration of method %s are both annotated with @GuardSatisfied(%s). However the corresponding annotations at the method call site are %s and %s, and neither is a subtype of the other.
guardsatisfied.return.must.have.index=@GuardSatisfied on a return type must use an index.
guardsatisfied.assignment.disallowed=Expressions %s and %s are both annotated with @GuardSatisfied. The guards for both expressions may be different, so the assignment is disallowed.
