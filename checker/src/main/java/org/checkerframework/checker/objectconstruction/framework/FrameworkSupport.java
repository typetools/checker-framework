package org.checkerframework.checker.objectconstruction.framework;

import com.sun.source.tree.NewClassTree;
import javax.lang.model.element.ExecutableElement;
import org.checkerframework.framework.type.AnnotatedTypeMirror;

/** add CalledMethods annotations to code generated by framework */
public interface FrameworkSupport {

    /**
     * Allows for supporting a framework's {@code toBuilder} routine. Typically, the returned
     * Builder has had all of its required setters invoked. So, the framework support can add a
     * {@link org.checkerframework.checker.objectconstruction.qual.CalledMethods} annotation
     * capturing this fact.
     *
     * @param t a method that is possibly the {@code toBuilder} method for a type that has an
     *     associated builder. An implementation must check that this is actually the {@code
     *     toBuilder} method for the corresponding framework
     */
    void handlePossibleToBuilder(AnnotatedTypeMirror.AnnotatedExecutableType t);

    /**
     * For {@code build} methods on {@code Builder} types, the framework support should determine
     * the required properties and add a corresponding {@link
     * org.checkerframework.checker.objectconstruction.qual.CalledMethods} annotation to the
     * receiver.
     *
     * @param t a method that is possibly the {@code build} method for a builder. The only
     *     guaranteed condition is that the enclosing class for the method is itself an inner class.
     */
    void handlePossibleBuilderBuildMethod(AnnotatedTypeMirror.AnnotatedExecutableType t);

    /**
     * For frameworks to add any necessary @{@link
     * org.checkerframework.checker.objectconstruction.qual.CalledMethods} annotation to a
     * constructor call
     *
     * @param tree AST for the call
     * @param type type of the call expression
     */
    void handleConstructor(NewClassTree tree, AnnotatedTypeMirror type);

    /**
     * Determines if a method is a {@code build} method on a {@code Builder} type for the framework
     *
     * @param e element for the method
     * @return {@code true} if {@code e} is a {@code build} method on a {@code Builder} type for the
     *     framework, {@code false} otherwise
     */
    boolean isBuilderBuildMethod(ExecutableElement e);
}
