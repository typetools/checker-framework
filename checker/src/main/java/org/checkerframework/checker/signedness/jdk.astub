import org.checkerframework.checker.signedness.qual.*;

package java.lang;

class Integer {
    public static String toUnsignedString(@Unsigned int i, int radix);

    static int formatUnsignedInt(@Unsigned int val, int shift, char[] buf, int offset, int len);

    public static String toUnsignedString(@Unsigned int i);

    public static @Unsigned int parseUnsignedInt(String s, int radix);

    public static @Unsigned int parseUnsignedInt(String s);

    public static int compareUnsigned(@Unsigned int x, @Unsigned int y);

    public static long toUnsignedLong(@Unsigned int x);

    public static @Unsigned int divideUnsigned(@Unsigned int dividend, @Unsigned int divisor);

    public static @Unsigned int remainderUnsigned(@Unsigned int dividend, @Unsigned int divisor);

}

class Long {
    public static String toUnsignedString(@Unsigned long i, int radix);

    // This is commented out until implicitly signed boxed types are implemented
    //private static @Unsigned BigInteger toUnsignedBigInteger(@Unsigned long i);

    static int formatUnsignedLong(@Unsigned long val, int shift, char[] buf, int offset, int len);

    public static String toUnsignedString(@Unsigned long i);

    public static @Unsigned long parseUnsignedLong(String s, int radix);

    public static @Unsigned long parseUnsignedLong(String s);

    public static int compareUnsigned(@Unsigned long x, @Unsigned long y);

    public static @Unsigned long divideUnsigned(@Unsigned long dividend, @Unsigned long divisor);

    public static @Unsigned long remainderUnsigned(@Unsigned long dividend, @Unsigned long divisor);
}

package java.util;

class Arrays {
    public static void fill(@PolySigned byte[] a, @PolySigned byte val);

    public static void fill(@PolySigned char[] a, @PolySigned char val);

    public static void fill(@PolySigned short[] a, @PolySigned short val);

    public static void fill(@PolySigned int[] a, @PolySigned int val);

    public static void fill(@PolySigned long[] a, @PolySigned long val);

    public static void fill(@PolySigned byte[] a, int fromIndex, int toIndex, @PolySigned byte val);

    public static void fill(@PolySigned char[] a, int fromIndex, int toIndex, @PolySigned char val);

    public static void fill(@PolySigned short[] a, int fromIndex, int toIndex, @PolySigned short val);

    public static void fill(@PolySigned int[] a, int fromIndex, int toIndex, @PolySigned int val);

    public static void fill(@PolySigned long[] a, int fromIndex, int toIndex, @PolySigned long val);
}
