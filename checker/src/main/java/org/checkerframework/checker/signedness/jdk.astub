import org.checkerframework.checker.signedness.qual.*;

package com.sun.corba.se.impl.encoding;

class CDROutputStream {
    public final void write(@PolySigned byte b[]);
    public final void write(@PolySigned byte b[], int off, int len);
}

package com.sun.corba.se.impl.io;

class IIOPOutputStream {
    public final void write(@PolySigned byte b[]);
    public final void write(@PolySigned byte b[], int off, int len);
}

package com.sun.corba.se.impl.orbutil;

class HexOutputStream {
    public synchronized void write(@PolySigned byte[] b);
    public synchronized void write(@PolySigned byte[] b, int off, int len);
}

package com.sun.imageio.plugins.png;

class PNGImageWriter {
    public void write(@PolySigned byte[] b, int off, int len);
    public void write(@PolySigned byte[] b, int off, int len);
}

package com.sun.org.apache.xml.internal.security.utils;

class DigesterOutputStream {
    public void write(@PolySigned byte[] arg0);
    public void write(@PolySigned byte[] arg0, int arg1, int arg2);
}

class SignerOutputStream {
    public void write(@PolySigned byte[] arg0) ;
    public void write(@PolySigned byte[] arg0, int arg1, int arg2);
}

class UnsyncBufferedOutputStream {
    public void write(@PolySigned byte[] arg0);
    public void write(@PolySigned byte[] arg0, int arg1, int len);
}

class UnsyncByteArrayOutputStream {
    public void write(@PolySigned byte[] arg0);
    public void write(@PolySigned byte[] arg0, int arg1, int arg2);
}

package java.lang;

class Integer {
    public static String toUnsignedString(@Unsigned int i, int radix);

    static int formatUnsignedInt(@Unsigned int val, int shift, char[] buf, int offset, int len);

    public static String toUnsignedString(@Unsigned int i);

    public static @Unsigned int parseUnsignedInt(String s, int radix);

    public static @Unsigned int parseUnsignedInt(String s);

    public static int compareUnsigned(@Unsigned int x, @Unsigned int y);

    public static long toUnsignedLong(@Unsigned int x);

    public static @Unsigned int divideUnsigned(@Unsigned int dividend, @Unsigned int divisor);

    public static @Unsigned int remainderUnsigned(@Unsigned int dividend, @Unsigned int divisor);

    public static @Unsigned int rotateRight(@Unsigned int i, int distance);

    public static @Unsigned int rotateLeft(@Unsigned int i, int distance);	

}

class Long {
    public static String toUnsignedString(@Unsigned long i, int radix);

    // This is commented out until implicitly signed boxed types are implemented
    //private static @Unsigned BigInteger toUnsignedBigInteger(@Unsigned long i);

    static int formatUnsignedLong(@Unsigned long val, int shift, char[] buf, int offset, int len);

    public static String toUnsignedString(@Unsigned long i);

    public static @Unsigned long parseUnsignedLong(String s, int radix);

    public static @Unsigned long parseUnsignedLong(String s);

    public static int compareUnsigned(@Unsigned long x, @Unsigned long y);

    public static @Unsigned long divideUnsigned(@Unsigned long dividend, @Unsigned long divisor);

    public static @Unsigned long remainderUnsigned(@Unsigned long dividend, @Unsigned long divisor);
}

package java.io;

class BufferedOutputStream {
    public synchronized void write(@PolySigned byte b[], int off, int len);
}

class ByteArrayOutputStream {
    public synchronized void write(@PolySigned byte b[], int off, int len);
}

class DataOutputStream {
    public synchronized void write(@PolySigned byte b[], int off, int len);
}

class FileOutputStream {
    public void write(@PolySigned byte b[]);
    public void write(@PolySigned byte b[], int off, int len);
}

class FilterOutputStream {
    public void write(@PolySigned byte b[]);
    public void write(@PolySigned byte b[], int off, int len);
}

class ObjectOutput {
    public void write(@PolySigned byte b[]);
    public void write(@PolySigned byte b[], int off, int len);
}

class ObjectOutputStream {
    public void write(@PolySigned byte[] buf);
    public void write(@PolySigned byte[] buf, int off, int len);
}

class OutputStream {
    public void write(@PolySigned byte b[]);
    public void write(@PolySigned byte b[], int off, int len);
}

class PipedOutputStream {
    public void write(@PolySigned byte b[], int off, int len);
}

class PrintStream {
    public void write(@PolySigned byte buf[], int off, int len);
}

class RandomAccessFile {
    public void write(@PolySigned byte b[]);
    public void write(@PolySigned byte b[], int off, int len);
}

package java.net;

class SocketOutputStream {
    public void write(@PolySigned byte b[]);
    public void write(@PolySigned byte b[], int off, int len);
}

package java.nio.file;

class Files {
    public static Path write(Path path, @PolySigned byte[] bytes, OpenOption... options);
}

package java.rmi.server;

class LogStream {
    public void write(@PolySigned byte b[], int off, int len);
}

package java.security;

class DigestOutputStream {
    public void write(@PolySigned byte[] b, int off, int len);
}

package java.util;

class Arrays {
    public static void fill(@PolySigned byte[] a, @PolySigned byte val);
    public static void fill(@PolySigned char[] a, @PolySigned char val);
    public static void fill(@PolySigned short[] a, @PolySigned short val);
    public static void fill(@PolySigned int[] a, @PolySigned int val);
    public static void fill(@PolySigned long[] a, @PolySigned long val);
    public static void fill(@PolySigned byte[] a, int fromIndex, int toIndex, @PolySigned byte val);
    public static void fill(@PolySigned char[] a, int fromIndex, int toIndex, @PolySigned char val);
    public static void fill(@PolySigned short[] a, int fromIndex, int toIndex, @PolySigned short val);
    public static void fill(@PolySigned int[] a, int fromIndex, int toIndex, @PolySigned int val);
    public static void fill(@PolySigned long[] a, int fromIndex, int toIndex, @PolySigned long val);

    public static @PolySigned byte[] copyOfRange(@PolySigned byte[] original, int from, int to);
    public static @PolySigned short[] copyOfRange(@PolySigned short[] original, int from, int to);
    public static @PolySigned int[] copyOfRange(@PolySigned int[] original, int from, int to);
    public static @PolySigned long[] copyOfRange(@PolySigned long[] original, int from, int to);
    public static @PolySigned char[] copyOfRange(@PolySigned char[] original, int from, int to);

    public static @PolySigned byte[] copyOf(@PolySigned byte[] original, int newLength);
    public static @PolySigned short[] copyOf(@PolySigned short[] original, int newLength);
    public static @PolySigned int[] copyOf(@PolySigned int[] original, int newLength);
    public static @PolySigned long[] copyOf(@PolySigned long[] original, int newLength);
    public static @PolySigned char[] copyOf(@PolySigned char[] original, int newLength);

}

package java.util.zip;

class CheckedOutputStream {
    public void write(@PolySigned byte[] b, int off, int len);
}

class DeflaterOutputStream {
    public void write(@PolySigned byte[] b, int off, int len);
}

class GZIPOutputStream {
    public synchronized void write(@PolySigned byte[] buf, int off, int len);
}

class InflaterOutputStream {
    public void write(@PolySigned byte[] b, int off, int len);
}

class ZipOutputStream {
    public synchronized void write(@PolySigned byte[] b, int off, int len);
}

package javax.imageio.stream;

class FileCacheImageOutputStream {
    public void write(@PolySigned byte[] b, int off, int len);
    public void write(@PolySigned byte[] b, int off, int len);
}

class ImageOutputStreamImpl {
    public void write(@PolySigned byte b[]);
    public abstract void write(@PolySigned byte b[], int off, int len);
}

class MemoryCache {
    public void write(@PolySigned byte[] b, int off, int len, long pos);
}

class MemoryCacheImageOutputStream {
    public void write(@PolySigned byte[] b, int off, int len);
}

package javax.sound.sampled;

class SourceDataLine {
    public int write(@PolySigned byte[] b, int off, int len);
}

package javax.swing.text.rtf;

class AbstractFilter {
    public void write(@PolySigned byte[] buf, int off, int len);
}

package org.omg.CORBA;

class OctetSeqHelper {
    public static void write (org.omg.CORBA.portable.OutputStream ostream, @PolySigned byte[] value);
}

package org.omg.PortableInterceptor;

class ObjectIdHelper {
  public static void write (org.omg.CORBA.portable.OutputStream ostream, @PolySigned byte[] value);
}
