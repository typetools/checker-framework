### Error messages for the NonNullChecker
dereference.of.nullable=dereference of possibly-null reference %s
iterating.over.nullable=iterating over possibly-null reference %s
unboxing.of.nullable=unboxing a possibly-null reference %s
throwing.nullable=throwing a possibly-null throwable %s
locking.nullable=synchronizing over a possibly-null lock %s
accessing.nullable=accessing a possibly-null array %s
condition.nullable=condition on a possibly-null value %s
switching.nullable=switching on a possibly-null value %s
known.nonnull=redundant check; "%s" is non-null
nonnull.nonstatic.with.class=field "%s" is not static but uses a class name
class.not.found.nullness.parse.error=class not found for field "%s"
field.not.found.nullness.parse.error=field "%s" not found
new.array.type.invalid=annotations %s may not be applied as component type for array "%s"
new.class.type.invalid=the annotations %s do not need be applied in object creations
toArray.nullable.elements.not.newarray=call of toArray on collection of non-null elements yields an array of possibly-null elements; omit the argument to toArray or make it an explicit array constructor
toArray.nullable.elements.mismatched.size=call of toArray on collection of non-null elements yields an array of possibly-null elements; cannot determine that the argument array has the same size as the receiver collection
clear.system.property=call might clear a predefined system property; pass -Alint=permitClearProperty to permit it
instanceof.nullable=instanceof is only true for a non-null expression
instanceof.nonnull.redundant=redundant @NonNull annotation on instanceof
nullness.on.primitive=nullness annotations are not applicable to primitive types
nullness.on.outer=nullness annotations are not applicable to outer types
