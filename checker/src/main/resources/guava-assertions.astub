package com.google.common.base;

import com.google.errorprone.annotations.CanIgnoreReturnValue;
import javax.annotation.CheckForNull;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.checkerframework.dataflow.qual.AssertMethod;

public final class Preconditions {
  private Preconditions() {}

  @AssertMethod(IllegalArgumentException.class)
  public static void checkArgument(boolean expression);

  @AssertMethod(IllegalArgumentException.class)
  public static void checkArgument(boolean expression, @CheckForNull Object errorMessage);

  @AssertMethod(IllegalArgumentException.class)
  public static void checkArgument(
      boolean expression,
      String errorMessageTemplate,
      @CheckForNull @Nullable Object... errorMessageArgs);

  @AssertMethod(IllegalArgumentException.class)
  public static void checkArgument(boolean expression, String errorMessageTemplate, char p1);

  @AssertMethod(IllegalArgumentException.class)
  public static void checkArgument(boolean expression, String errorMessageTemplate, int p1);

  @AssertMethod(IllegalArgumentException.class)
  public static void checkArgument(boolean expression, String errorMessageTemplate, long p1);

  @AssertMethod(IllegalArgumentException.class)
  public static void checkArgument(
      boolean expression, String errorMessageTemplate, @CheckForNull Object p1);

  @AssertMethod(IllegalArgumentException.class)
  public static void checkArgument(
      boolean expression, String errorMessageTemplate, char p1, char p2);

  @AssertMethod(IllegalArgumentException.class)
  public static void checkArgument(
      boolean expression, String errorMessageTemplate, char p1, int p2);

  @AssertMethod(IllegalArgumentException.class)
  public static void checkArgument(
      boolean expression, String errorMessageTemplate, char p1, long p2);

  @AssertMethod(IllegalArgumentException.class)
  public static void checkArgument(
      boolean expression, String errorMessageTemplate, char p1, @CheckForNull Object p2);

  @AssertMethod(IllegalArgumentException.class)
  public static void checkArgument(
      boolean expression, String errorMessageTemplate, int p1, char p2);

  @AssertMethod(IllegalArgumentException.class)
  public static void checkArgument(
      boolean expression, String errorMessageTemplate, int p1, int p2);

  @AssertMethod(IllegalArgumentException.class)
  public static void checkArgument(
      boolean expression, String errorMessageTemplate, int p1, long p2);

  @AssertMethod(IllegalArgumentException.class)
  public static void checkArgument(
      boolean expression, String errorMessageTemplate, int p1, @CheckForNull Object p2);

  @AssertMethod(IllegalArgumentException.class)
  public static void checkArgument(
      boolean expression, String errorMessageTemplate, long p1, char p2);

  @AssertMethod(IllegalArgumentException.class)
  public static void checkArgument(
      boolean expression, String errorMessageTemplate, long p1, int p2);

  @AssertMethod(IllegalArgumentException.class)
  public static void checkArgument(
      boolean expression, String errorMessageTemplate, long p1, long p2);

  @AssertMethod(IllegalArgumentException.class)
  public static void checkArgument(
      boolean expression, String errorMessageTemplate, long p1, @CheckForNull Object p2);

  @AssertMethod(IllegalArgumentException.class)
  public static void checkArgument(
      boolean expression, String errorMessageTemplate, @CheckForNull Object p1, char p2);

  @AssertMethod(IllegalArgumentException.class)
  public static void checkArgument(
      boolean expression, String errorMessageTemplate, @CheckForNull Object p1, int p2);

  @AssertMethod(IllegalArgumentException.class)
  public static void checkArgument(
      boolean expression, String errorMessageTemplate, @CheckForNull Object p1, long p2);

  @AssertMethod(IllegalArgumentException.class)
  public static void checkArgument(
      boolean expression,
      String errorMessageTemplate,
      @CheckForNull Object p1,
      @CheckForNull Object p2);

  @AssertMethod(IllegalArgumentException.class)
  public static void checkArgument(
      boolean expression,
      String errorMessageTemplate,
      @CheckForNull Object p1,
      @CheckForNull Object p2,
      @CheckForNull Object p3);

  @AssertMethod(IllegalArgumentException.class)
  public static void checkArgument(
      boolean expression,
      String errorMessageTemplate,
      @CheckForNull Object p1,
      @CheckForNull Object p2,
      @CheckForNull Object p3,
      @CheckForNull Object p4);

  @AssertMethod(IllegalStateException.class)
  public static void checkState(boolean expression);

  @AssertMethod(IllegalStateException.class)
  public static void checkState(boolean expression, @CheckForNull Object errorMessage);

  @AssertMethod(IllegalStateException.class)
  public static void checkState(
      boolean expression,
      @CheckForNull String errorMessageTemplate,
      @CheckForNull @Nullable Object... errorMessageArgs);

  @AssertMethod(IllegalStateException.class)
  public static void checkState(boolean expression, String errorMessageTemplate, char p1);

  @AssertMethod(IllegalStateException.class)
  public static void checkState(boolean expression, String errorMessageTemplate, int p1);

  @AssertMethod(IllegalStateException.class)
  public static void checkState(boolean expression, String errorMessageTemplate, long p1);

  @AssertMethod(IllegalStateException.class)
  public static void checkState(
      boolean expression, String errorMessageTemplate, @CheckForNull Object p1);

  @AssertMethod(IllegalStateException.class)
  public static void checkState(boolean expression, String errorMessageTemplate, char p1, char p2);

  @AssertMethod(IllegalStateException.class)
  public static void checkState(boolean expression, String errorMessageTemplate, char p1, int p2);

  @AssertMethod(IllegalStateException.class)
  public static void checkState(boolean expression, String errorMessageTemplate, char p1, long p2);

  @AssertMethod(IllegalStateException.class)
  public static void checkState(
      boolean expression, String errorMessageTemplate, char p1, @CheckForNull Object p2);

  @AssertMethod(IllegalStateException.class)
  public static void checkState(boolean expression, String errorMessageTemplate, int p1, char p2);

  @AssertMethod(IllegalStateException.class)
  public static void checkState(boolean expression, String errorMessageTemplate, int p1, int p2);

  @AssertMethod(IllegalStateException.class)
  public static void checkState(boolean expression, String errorMessageTemplate, int p1, long p2);

  @AssertMethod(IllegalStateException.class)
  public static void checkState(
      boolean expression, String errorMessageTemplate, int p1, @CheckForNull Object p2);

  @AssertMethod(IllegalStateException.class)
  public static void checkState(boolean expression, String errorMessageTemplate, long p1, char p2);

  @AssertMethod(IllegalStateException.class)
  public static void checkState(boolean expression, String errorMessageTemplate, long p1, int p2);

  @AssertMethod(IllegalStateException.class)
  public static void checkState(boolean expression, String errorMessageTemplate, long p1, long p2);

  @AssertMethod(IllegalStateException.class)
  public static void checkState(
      boolean expression, String errorMessageTemplate, long p1, @CheckForNull Object p2);

  @AssertMethod(IllegalStateException.class)
  public static void checkState(
      boolean expression, String errorMessageTemplate, @CheckForNull Object p1, char p2);

  @AssertMethod(IllegalStateException.class)
  public static void checkState(
      boolean expression, String errorMessageTemplate, @CheckForNull Object p1, int p2);

  @AssertMethod(IllegalStateException.class)
  public static void checkState(
      boolean expression, String errorMessageTemplate, @CheckForNull Object p1, long p2);

  @AssertMethod(IllegalStateException.class)
  public static void checkState(
      boolean expression,
      String errorMessageTemplate,
      @CheckForNull Object p1,
      @CheckForNull Object p2);

  @AssertMethod(IllegalStateException.class)
  public static void checkState(
      boolean expression,
      String errorMessageTemplate,
      @CheckForNull Object p1,
      @CheckForNull Object p2,
      @CheckForNull Object p3);

  @AssertMethod(IllegalStateException.class)
  public static void checkState(
      boolean expression,
      String errorMessageTemplate,
      @CheckForNull Object p1,
      @CheckForNull Object p2,
      @CheckForNull Object p3,
      @CheckForNull Object p4);

  @CanIgnoreReturnValue
  public static <T> T checkNotNull(@CheckForNull T reference);

  @CanIgnoreReturnValue
  public static <T> T checkNotNull(@CheckForNull T reference, @CheckForNull Object errorMessage);

  @CanIgnoreReturnValue
  public static <T> T checkNotNull(
      @CheckForNull T reference,
      String errorMessageTemplate,
      @CheckForNull @Nullable Object... errorMessageArgs);

  @CanIgnoreReturnValue
  public static <T> T checkNotNull(
      @CheckForNull T reference, String errorMessageTemplate, char p1);

  @CanIgnoreReturnValue
  public static <T> T checkNotNull(@CheckForNull T reference, String errorMessageTemplate, int p1);

  @CanIgnoreReturnValue
  public static <T> T checkNotNull(
      @CheckForNull T reference, String errorMessageTemplate, long p1);

  @CanIgnoreReturnValue
  public static <T> T checkNotNull(
      @CheckForNull T reference, String errorMessageTemplate, @CheckForNull Object p1);

  @CanIgnoreReturnValue
  public static <T> T checkNotNull(
      @CheckForNull T reference, String errorMessageTemplate, char p1, char p2);

  @CanIgnoreReturnValue
  public static <T> T checkNotNull(
      @CheckForNull T reference, String errorMessageTemplate, char p1, int p2);

  @CanIgnoreReturnValue
  public static <T> T checkNotNull(
      @CheckForNull T reference, String errorMessageTemplate, char p1, long p2);

  @CanIgnoreReturnValue
  public static <T> T checkNotNull(
      @CheckForNull T reference, String errorMessageTemplate, char p1, @CheckForNull Object p2);

  @CanIgnoreReturnValue
  public static <T> T checkNotNull(
      @CheckForNull T reference, String errorMessageTemplate, int p1, char p2);

  @CanIgnoreReturnValue
  public static <T> T checkNotNull(
      @CheckForNull T reference, String errorMessageTemplate, int p1, int p2);

  @CanIgnoreReturnValue
  public static <T> T checkNotNull(
      @CheckForNull T reference, String errorMessageTemplate, int p1, long p2);

  @CanIgnoreReturnValue
  public static <T> T checkNotNull(
      @CheckForNull T reference, String errorMessageTemplate, int p1, @CheckForNull Object p2);

  @CanIgnoreReturnValue
  public static <T> T checkNotNull(
      @CheckForNull T reference, String errorMessageTemplate, long p1, char p2);

  @CanIgnoreReturnValue
  public static <T> T checkNotNull(
      @CheckForNull T reference, String errorMessageTemplate, long p1, int p2);

  @CanIgnoreReturnValue
  public static <T> T checkNotNull(
      @CheckForNull T reference, String errorMessageTemplate, long p1, long p2);

  @CanIgnoreReturnValue
  public static <T> T checkNotNull(
      @CheckForNull T reference, String errorMessageTemplate, long p1, @CheckForNull Object p2);

  @CanIgnoreReturnValue
  public static <T> T checkNotNull(
      @CheckForNull T reference, String errorMessageTemplate, @CheckForNull Object p1, char p2);

  @CanIgnoreReturnValue
  public static <T> T checkNotNull(
      @CheckForNull T reference, String errorMessageTemplate, @CheckForNull Object p1, int p2);

  @CanIgnoreReturnValue
  public static <T> T checkNotNull(
      @CheckForNull T reference, String errorMessageTemplate, @CheckForNull Object p1, long p2);

  @CanIgnoreReturnValue
  public static <T> T checkNotNull(
      @CheckForNull T reference,
      String errorMessageTemplate,
      @CheckForNull Object p1,
      @CheckForNull Object p2);

  @CanIgnoreReturnValue
  public static <T> T checkNotNull(
      @CheckForNull T reference,
      String errorMessageTemplate,
      @CheckForNull Object p1,
      @CheckForNull Object p2,
      @CheckForNull Object p3);

  @CanIgnoreReturnValue
  public static <T> T checkNotNull(
      @CheckForNull T reference,
      String errorMessageTemplate,
      @CheckForNull Object p1,
      @CheckForNull Object p2,
      @CheckForNull Object p3,
      @CheckForNull Object p4);

  @CanIgnoreReturnValue
  public static int checkElementIndex(int index, int size);

  @CanIgnoreReturnValue
  public static int checkElementIndex(int index, int size, String desc);

  private static String badElementIndex(int index, int size, String desc);

  @CanIgnoreReturnValue
  public static int checkPositionIndex(int index, int size);

  @CanIgnoreReturnValue
  public static int checkPositionIndex(int index, int size, String desc);

  private static String badPositionIndex(int index, int size, String desc);

  public static void checkPositionIndexes(int start, int end, int size);

  private static String badPositionIndexes(int start, int end, int size);
}
