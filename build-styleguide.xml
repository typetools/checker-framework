<!--
  This is a configuration file for use by Ant when building the
  Checker Framework.
  This file is shared between all subprojects and external projects.
  It contains targets to automatically enforce a common style.
  The fileset "formatted.java.files" must contain the files to reformat.
-->
<project name="styleguide">

  <property name="style.grep.args" value="-r -n -e"/>

  <!-- These variables contain commands, not lists of files. -->
  <!-- keep these two lists in sync -->
  <property name="style.grep.files" value="--exclude-dir=.git --exclude-dir=annotated --exclude-dir=api --exclude-dir=bib --exclude-dir=bootstrap --exclude-dir=build --exclude-dir=jdk --exclude-dir=maven-artifacts --exclude-dir=stubparser --exclude='*.aux' --exclude='*.bib' --exclude='*.class' --exclude='*.dvi' --exclude='*.expected' --exclude='*.gif' --exclude='*.jar' --exclude='*.jtr' --exclude='*.log' --exclude='*.out' --exclude='*.patch' --exclude='*.pdf' --exclude='*.png' --exclude='*.sty' --exclude='*.xcf' --exclude='*~' --exclude='#*#' --exclude='CFLogo.ai' --exclude='logfile.log.rec.index' --exclude='manual.html' --exclude='manual.html-e' --exclude='junit*.properties' ."/>
  <property name="style.find.files" value=". -not ( -name .git -prune ) -not ( -name annotated -prune ) -not ( -name api -prune ) -not ( -name bib -prune ) -not ( -name bootstrap -prune ) -not ( -name build -prune ) -not ( -name jdk -prune ) -not ( -path maven-artifacts -prune ) -not ( -path stubparser -prune ) -not ( -name '*.aux' ) -not ( -name '*.bib' ) -not ( -name '*.class' ) -not ( -name '*.dvi' ) -not ( -name '*.expected' ) -not ( -name '*.gif' ) -not ( -name '*.jar' ) -not ( -name '*.log' ) -not ( -name '*.out' ) -not ( -name '*.patch' ) -not ( -name '*.pdf' ) -not ( -name '*.png' ) -not ( -name 'junit*.properties' ) -not ( -name '*~' ) -not ( -name '#*#' ) -not ( -name 'manual.html' ) -not ( -name 'manual.html-e' ) -not ( -empty ) -type f"/>

  <loadresource property="style.find.files.quoted">
    <propertyresource name="style.find.files"/>
    <filterchain>
      <tokenfilter>
        <replacestring from="(" to="\("/>
        <replacestring from=")" to="\)"/>
      </tokenfilter>
    </filterchain>
  </loadresource>

  <target name="check-style" depends="check-format"
          description="Check basic style guidelines">
    <!-- There should be a way to templatize the following. -->

    <exec executable="grep" outputproperty="trailingwhitespace" failonerror="false">
      <arg line="${style.grep.args}"/>
      <arg value=" $"/>
      <arg line="${style.grep.files}"/>
    </exec>
    <fail message="Trailing whitespace:${line.separator}${trailingwhitespace}">
      <condition>
        <not>
          <equals arg1="${trailingwhitespace}" arg2=""/>
        </not>
      </condition>
    </fail>

    <exec executable="grep" outputproperty="missingspace" failonerror="false">
      <arg line="${style.grep.args}"/>
      <arg value="[^\\]\b\(else\|finally\|try\){\|}\(catch\|else\|finally\)\b\|){\($\|[^0-9]\)\|\b\(catch\|for\|if\|while\)("/>
      <arg line="${style.grep.files}"/>
      <arg line="--exclude=build-styleguide.xml --exclude=Makefile"/>
    </exec>
    <fail message="Missing space:${line.separator}${missingspace}">
      <condition>
        <not>
          <equals arg1="${missingspace}" arg2=""/>
        </not>
      </condition>
    </fail>

    <!-- To remove trailing whitespace:
         find . -name '*.java' | xargs sed -i ':a;/^[ \n]*$/{$d;N;ba}'
    -->
    <exec executable="find" outputproperty="blankline" failonerror="false">
      <arg line="${style.find.files}"/>
      <arg value="-exec"/>
      <arg value="sh"/>
      <arg value="+v"/>
      <arg value="+x"/>
      <arg value="-c"/>
      <arg value="[ -z &quot;$(sed -n &quot;\$p&quot; &quot;$1&quot;)&quot; ]"/>
      <arg value="_"/>
      <arg value="{}"/>
      <arg value=";"/>
      <arg value="-print"/>
    </exec>
    <fail message="Blank line at end of file:${line.separator}${blankline}">
      <condition>
        <not>
          <equals arg1="${blankline}" arg2=""/>
        </not>
      </condition>
    </fail>

    <!-- To add final newline:
         find -type f -name '*.java' | xargs sed -i -e '$a\'
    -->
    <exec executable="sh" outputproperty="notrailingnewline" failonerror="false">
      <arg value="+v"/>
      <arg value="+x"/>
      <arg value="-c"/>
      <arg value="find ${style.find.files.quoted} -print0 | xargs -0 -L1 sh +v +x -c 'test &quot;$(tail -c 1 &quot;$0&quot;)&quot; &amp;&amp; echo &quot;No newline at end of $0&quot;'"/>
      <!-- <arg value="find ${style.find.files.quoted} -print0 | xargs -0 -L1 bash -c 'echo &quot;$0&quot;'"/> -->
    </exec>
    <fail message="Missing newline at end of files:${line.separator}${notrailingnewline}">
      <condition>
        <not>
          <equals arg1="${notrailingnewline}" arg2=""/>
        </not>
      </condition>
    </fail>
  </target>


  <!-- Allow 30 seconds for either formatting task to complete. -->
  <!-- I can add back  quiet="true"  to the get invocations, when all
       installations have a modern enough Ant that recognizes that attribute. -->

  <condition property="isMac">
    <os family="mac" />
  </condition>

  <!-- Avoids "Argument list too long" message.  You can also set
       this property in file local.properties. -->
  <condition property="maxparallel" value="1000" else="-1">
    <isset property="isMac"/>
  </condition>

  <target name="-get-run-google-java-format"
          description="Obtain or update run-google-java-format project">
    <exec executable="/bin/sh">
      <arg value="-c"/>
      <arg value="cd ${checker.loc}/bin-devel &amp;&amp; ((cd .run-google-java-format &amp;&amp; git pull -q) || git clone -q https://github.com/plume-lib/run-google-java-format.git .run-google-java-format)"/>
    </exec>
  </target>

  <target name="reformat" depends="-get-run-google-java-format"
          description="Reformat Java code">
    <apply executable="python" parallel="true" maxparallel="${maxparallel}" failonerror="true">
      <arg value="${checker.loc}/bin-devel/.run-google-java-format/run-google-java-format.py"/>
      <arg value="--aosp"/>    <!-- 4-space indentation -->
      <fileset refid="formatted.java.files"/>
    </apply>
  </target>

  <target name="check-format" depends="-get-run-google-java-format"
          description="Check Java code formatting">
    <apply executable="python" parallel="true" maxparallel="${maxparallel}" failonerror="true">
      <arg value="${checker.loc}/bin-devel/.run-google-java-format/check-google-java-format.py"/>
      <arg value="--aosp"/>    <!-- 4-space indentation -->
      <fileset refid="formatted.java.files"/>
    </apply>
  </target>

</project>
