<!--
  This is an Ant build file for compiling the Dataflow Framework.
-->
<project name="dataflow" default="dist" basedir=".">

    <description>
        Builds the Dataflow Framework for the Checker Framework.
    </description>

    <property file="build.${os.name}.properties"/>
    <property file="build.properties"/>
    <property file="${basedir}/../build-common.properties"/>

    <import file="${basedir}/../build-common.xml"/>

    <property name="javadoc.private" value="false"/>

    <!-- Dependendencies on other projects (such as javacutil)
         mirrors javadoc dependencies. If changing project
         dependencies, change the Javadoc dependencies to keep
         them in sync (and vice versa). -->
    <target name="prep" depends="prep-all"
            description="Create required directories">
        <mkdir dir="${build}"/>
        <mkdir dir="${api.doc}"/>

        <available property="javacutil.project"
                   file="${javacutil.loc}/build.xml"/>
        <antcall target="-prep-javacutil-compile"/>
    </target>

    <target name="-prep-javacutil-compile" if="javacutil.project"
            description="Compile javacutil project">
        <ant dir="${javacutil.loc}">
            <target name="dist"/>
        </ant>
    </target>

    <target name="clean" description="Remove generated files">
        <ant dir="${javacutil.loc}">
            <target name="clean"/>
        </ant>

        <delete dir="${build}"/>
        <delete file="${dataflow.lib}"/>
        <delete dir="${api.doc}"/>
        <delete dir="${temp.dir}"/>
        <delete dir="dist" />
    </target>

    <target name="build.check.uptodate"
            description="Set properties: filesets and build.uptodate">
        <fileset id="src.files" dir="${src}">
            <include name="**/*.java"/>
            <exclude name="**/package-info.java"/>
        </fileset>

        <!-- I can't figure out how to combine filesets (or even selectors)
             to get just one *.uptodate property, so do them individually
             and then combine with <condition>. -->
            <!-- Probably should depend on a file rather than a directory. -->
        <uptodate property="src.files.uptodate" targetfile="${build}">
            <srcfiles refid="src.files"/>
            <mapper type="glob" from="*.java" to="../${build}/*.class"/>
        </uptodate>

        <uptodate property="javacutil.lib.uptodate" targetfile="${build}" srcfile="${javacutil.lib}"/>

        <condition property="build.uptodate">
            <and>
                <isset property="src.files.uptodate"/>
                <isset property="javacutil.lib.uptodate"/>
            </and>
        </condition>

        <!--
        <echo message="src.files.uptodate: ${src.files.uptodate}"/>
        <echo message="javacutil.lib.uptodate: ${javacutil.lib.uptodate}"/>
        <echo message="build.uptodate: ${build.uptodate}"/>
        -->
    </target>

    <target name="build" depends="prep,build.check.uptodate"
            unless="build.uptodate"
            description="Compile files.  Does not update any jars">
        <pathconvert pathsep=" " property="src.files.spaceseparated_df">
            <path>
                <fileset dir="${src}">
                    <include name="**/*.java"/>
                </fileset>
            </path>
        </pathconvert>

        <echo message="${src.files.spaceseparated_df}" file="${tmpdir}/srcfiles-dataflow.txt"/>
        <java fork="true"
              failonerror="true"
              classpath="${javac.lib}:${javacutil.lib}"
              classname="com.sun.tools.javac.Main">
            <arg value="-g"/>
            <!-- Make sure we only have Java 8 source code and generate Java 8 bytecode. -->
            <arg value="-source"/>
            <arg value="8"/>
            <arg value="-target"/>
            <arg value="8"/>
            <!-- To not get a warning about missing bootstrap
                 classpath for Java 8 (once we use Java 9). -->
            <arg value="-Xlint:-options"/>
            <arg value="-encoding"/>
            <arg value="utf-8"/>
            <arg value="-sourcepath"/>
            <arg value="${src}"/>
            <arg value="-d"/>
            <arg value="${build}"/>
            <arg value="@${tmpdir}/srcfiles-dataflow.txt"/>
            <arg value="-version"/>
            <arg value="-XDTA:noannotationsincomments"/>
            <arg value="-Xlint"/>
            <arg value="-Werror"/>
        </java>
        <delete file="${tmpdir}/srcfiles-dataflow.txt"/>

        <!--
        Touch doesn't work on a directory, so can't do:
           <touch file="${build}"/>
        Instead, create and remove a file, which modifies the directory.
        -->
        <touch file="${build}/.timestamp"/>
        <delete file="${build}/.timestamp"/>
    </target>

    <!-- TODO: add a type-checking target that doesn't use
         -XDTA:noannotations in comments. -->

    <target name="manual" depends="prep" description="Create PDF manual">
        <exec executable="make" dir="manual" failonerror="true">
        </exec>
    </target>

    <!-- Dependendencies on other projects (such as javacutil)
         mirrors javadoc dependencies. If changing project
         dependencies, change the Javadoc dependencies to keep
         them in sync (and vice versa). -->
    <target name="javadoc" depends="prep,prep-ManualTaglet" description="Create Javadoc documentation">
        <ant dir="${javacutil.loc}">
            <target name="javadoc"/>
        </ant>

        <!-- This relative path is wrong; running "ant -find" from a
        subdirectory fails. -->
        <!-- With Ant 1.9.4 or later, add
            failonwarning="true"
            but Travis is stuck on Ant 1.8.2 as of 6/2016 -->
        <javadoc sourcepath="${src}:${javacutil.loc}/${src}"
                 destdir="${api.doc}"
                 private="${javadoc.private}"
                 encoding="UTF-8"
                 additionalParam="-Xdoclint:all,-missing"
                 failonerror="true"
                 executable="${javadoc.bin}"
                 classpath="${build}:${javacutil.lib}:${javac.lib}:${javadoc.lib}">
            <package name="org.checkerframework.dataflow.*"/>
            <package name="org.checkerframework.javacutil.*"/>
            <link href="https://docs.oracle.com/javase/8/docs/api/"/>
            <link href="https://docs.oracle.com/javase/8/docs/jdk/api/javac/tree/"/>
            <taglet name="org.checkerframework.javacutil.dist.ManualTaglet" path="${build}"/>
            <arg value="-XDTA:noannotationsincomments"/>
        </javadoc>
    </target>

    <target name="dist"
            depends="build"
            description="Create jar file">
        <mkdir dir="dist" />
        <jar destfile="${dataflow.lib}" basedir="${build}"/>
    </target>

    <target name="sources-jar">
        <jar destfile="${dataflow.sources.lib}" basedir="${src}"/>
    </target>

    <target name="javadoc-jar" depends="javadoc">
        <jar destfile="${dataflow.javadoc.lib}" basedir="${api.doc}" includes="**"/>
    </target>

</project>
