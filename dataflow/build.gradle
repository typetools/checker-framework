dependencies {
    implementation project(':javacutil')
    implementation project(':checker-qual')
    implementation 'org.plumelib:plume-util:1.1.7'
}

shadowJar {
    archiveFileName = "dataflow-shaded.jar"
    relocate 'org.checkerframework.dataflow', 'org.checkerframework.shaded.dataflow'
    relocate 'org.checkerframework.javacutil', 'org.checkerframework.shaded.javacutil'
}

artifacts {
    archives shadowJar
}

task deployArtifactsToLocalRepo(dependsOn: jar) {
    description "Deploys ${jar.archiveFileName.get()} to the local Maven repository"
    dependsOn ('jar', 'shadowJar')

    doLast {
        mvnDeployToLocalRepo(project, "${pomFiles}/dataflow-pom.xml")
        mvnDeployToLocalRepo(shadowJar.archiveFile.get().toString(), "${pomFiles}/dataflow-shaded-pom.xml")
    }
}

task deployArtifactsToSonatype {
    description "Deploys ${jar.archiveFileName.get()} to the Sonatype repository"
    dependsOn ('jar', 'sourcesJar', 'javadocJar', 'shadowJar')
    doLast {
        mvnSignAndDeployMultipleToSonatype(project, "${pomFiles}/dataflow-pom.xml")
        mvnSignAndDeployMultipleToSonatype(shadowJar.archiveFile.get().toString(), sourcesJar.archiveFile.get().toString(), javadocJar.archiveFile.get().toString(), "${pomFiles}/dataflow-shaded-pom.xml")
    }
}

task liveVariableTest(dependsOn: compileTestJava, group: 'Verification') {
    description 'Test the live variable analysis test for dataflow framework.'
    inputs.file('tests/live-variable/Expected.txt')
    inputs.file('tests/live-variable/Test.java')

    outputs.file('tests/live-variable/Out.txt')
    outputs.file('tests/live-variable/Test.class')

    delete('tests/live-variable/Out.txt')
    delete('tests/live-variable/Test.class')
    doLast {
        javaexec {
            workingDir = 'tests/live-variable'
            if (!JavaVersion.current().java9Compatible) {
                jvmArgs += "-Xbootclasspath/p:${configurations.javacJar.asPath}".toString()
            }
            classpath = sourceSets.test.runtimeClasspath
            classpath += sourceSets.test.output
            main = 'livevar.LiveVariable'
        }
        exec {
            workingDir = 'tests/live-variable'
            executable 'diff'
            args = ['-u', 'Expected.txt', 'Out.txt']
        }
    }
}

task issue3447Test(dependsOn: compileTestJava, group: 'Verification') {
    description 'Test issue 3447 test case for backward analysis.'
    inputs.file('tests/issue3447/Test.java')
    delete('tests/issue3447/Out.txt')
    delete('tests/issue3447/Test.class')
    doLast {
        javaexec {
            workingDir = 'tests/issue3447'
            if (!JavaVersion.current().java9Compatible) {
                jvmArgs += "-Xbootclasspath/p:${configurations.javacJar.asPath}".toString()
            }
            classpath = sourceSets.test.runtimeClasspath
            classpath += sourceSets.test.output

            main = 'livevar.LiveVariable'
        }
    }
}
